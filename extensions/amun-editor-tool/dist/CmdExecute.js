"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmdExecute = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const Config_1 = require("./tools/Config");
const Constant_1 = require("./tools/Constant");
const Logger_1 = require("./tools/Logger");
const Utils_1 = require("./tools/Utils");
class CmdExecute {
    /** 功能测试 */
    static test() {
        console.log("测试");
        let dir = path_1.default.dirname(Constant_1.Constant.LogFilePath);
        let basename = path_1.default.basename(Constant_1.Constant.LogFilePath);
        Logger_1.Logger.debug(dir);
        Logger_1.Logger.debug(basename);
        Utils_1.Utils.exeCMD(dir, basename);
    }
    /** 保存游戏配置到本地 */
    static saveGameSetting(jsonStr) {
        Config_1.Config.set("gameSetting", JSON.parse(jsonStr));
    }
    /** 导表 */
    static loadExcel() {
        let workDir = Utils_1.Utils.ProjectPath + "/excel";
        let batPath = "gen_code_json.bat";
        let tsDir = Utils_1.Utils.ProjectPath + "/assets/scripts/gen/table";
        fs_extra_1.default.ensureDirSync(tsDir);
        Logger_1.Logger.debug(workDir);
        Utils_1.Utils.exeCMD(workDir, batPath, msg => {
            Logger_1.Logger.debug(msg);
        }).then(code => {
            if (!code) {
                let bundles = Utils_1.Utils.ProjectPath + "/assets/bundles";
                let dirs = Utils_1.Utils.getAllDirs(bundles, null, true);
                dirs.push(Utils_1.Utils.ProjectPath + "/assets/resources");
                for (const dir of dirs) {
                    let tableDir = dir + "/table";
                    if (fs_extra_1.default.existsSync(tableDir)) {
                        Utils_1.Utils.refreshAsset(tableDir);
                    }
                }
                Utils_1.Utils.refreshAsset(tsDir);
            }
            else {
                Logger_1.Logger.error("导表失败");
            }
        });
    }
    /** 生成一些常量 */
    static genConst() {
        //生成Bundles.json
        {
            let bundlesDir = Utils_1.Utils.ProjectPath + "/assets/bundles";
            let outFile = Utils_1.Utils.ProjectPath + "/assets/scripts/gen/BundleConstant.ts";
            let result = [];
            let list = fs_extra_1.default.readdirSync(bundlesDir);
            for (const name of list) {
                let path = bundlesDir + "/" + name;
                if (fs_extra_1.default.statSync(path).isDirectory()) {
                    let obj = fs_extra_1.default.readJSONSync(path + ".meta");
                    if (obj['userData'] && obj['userData']['isBundle']) {
                        result.push(name);
                    }
                }
            }
            let content = `export const BundleConstant = ${JSON.stringify(result)};`;
            fs_extra_1.default.writeFileSync(outFile, content);
            Utils_1.Utils.refreshAsset(outFile);
            Logger_1.Logger.info("生成BundleConstant.ts成功");
        }
        //生成UIConstant
        {
            let map = {};
            let outFile = Utils_1.Utils.ProjectPath + "/assets/scripts/gen/UIConstant.ts";
            let ext = ".prefab";
            let path1 = Utils_1.Utils.ProjectPath + "/assets/bundles";
            let path2 = Utils_1.Utils.ProjectPath + "/assets/resources";
            let filter = (file) => file.endsWith(ext);
            let files = Utils_1.Utils.getAllFiles(path1, filter).concat(Utils_1.Utils.getAllFiles(path2, filter));
            files.forEach(v => {
                let basename = path_1.default.basename(v);
                if (v.indexOf("/uiPrefab/") > 0) {
                    let name = basename.replace(ext, "");
                    let location = "";
                    if (v.startsWith(path1)) {
                        location = v.replace(path1 + "/", "");
                        location = location.substring(location.indexOf("/") + 1);
                    }
                    else if (v.startsWith(path2)) {
                        location = v.replace(path2 + "/", "");
                    }
                    location = location.replace(ext, "");
                    map[name] = location;
                }
            });
            let content = "export const UIConstant = {\n";
            for (const key in map) {
                content += `    ${key}: "${map[key]}",\n`;
            }
            content += "} as const;";
            fs_extra_1.default.ensureDirSync(path_1.default.dirname(outFile));
            fs_extra_1.default.writeFileSync(outFile, content);
            Utils_1.Utils.refreshAsset(outFile);
            Logger_1.Logger.info("生成UIConstant成功");
        }
    }
    static closeTexCompress() {
        Logger_1.Logger.info("关闭纹理压缩开始");
        let exts = [".jpg", ".png", ".jpeg", ".pac"];
        let filter = (file) => {
            let ext = path_1.default.extname(file);
            return exts.includes(ext);
        };
        let allFiles = Utils_1.Utils.getAllFiles(Utils_1.Utils.ProjectPath + "/assets", filter);
        for (const file of allFiles) {
            if (path_1.default.basename(file).startsWith("__"))
                continue;
            let metaFile = file + ".meta";
            let obj = fs_extra_1.default.readJSONSync(metaFile);
            let compressSettings = obj.userData.compressSettings;
            if (compressSettings && compressSettings.useCompressTexture) {
                compressSettings.useCompressTexture = false;
                fs_extra_1.default.writeJSONSync(metaFile, obj, { spaces: 2 });
                Utils_1.Utils.refreshAsset(file);
                Logger_1.Logger.info("关闭纹理压缩", file);
            }
        }
        Logger_1.Logger.info("关闭纹理压缩结束");
    }
    static setTexCompress() {
        let presetId = Editor.Clipboard.read("text");
        if (presetId.length != 22) {
            Logger_1.Logger.warn("请先拷贝一个纹理压缩配置的22位UUID到剪切板(项目设置-压缩纹理-配置压缩预设集)");
        }
        else {
            Logger_1.Logger.info("纹理压缩方案UUID:", presetId);
            let exts = [".jpg", ".png", ".jpeg", ".pac"];
            let filter = (file) => {
                let ext = path_1.default.extname(file);
                return exts.includes(ext);
            };
            let allFiles = Utils_1.Utils.getAllFiles(Utils_1.Utils.ProjectPath + "/assets", filter);
            for (const file of allFiles) {
                if (path_1.default.basename(file).startsWith("__"))
                    continue;
                let metaFile = file + ".meta";
                let obj = fs_extra_1.default.readJSONSync(metaFile);
                let compressSettings = obj.userData.compressSettings;
                if (!compressSettings || !compressSettings.useCompressTexture || compressSettings.presetId != presetId) {
                    let newCompressSettings = {
                        useCompressTexture: true,
                        presetId: presetId
                    };
                    obj.userData.compressSettings = newCompressSettings;
                    fs_extra_1.default.writeJSONSync(metaFile, obj, { spaces: 2 });
                    Utils_1.Utils.refreshAsset(file);
                    Logger_1.Logger.info(`纹理压缩设置  ${file}`);
                }
            }
            Logger_1.Logger.info("设置纹理压缩结束");
        }
    }
    static openLogFile() {
        if (fs_extra_1.default.existsSync(Constant_1.Constant.LogFilePath)) {
            let dir = path_1.default.dirname(Constant_1.Constant.LogFilePath);
            let basename = path_1.default.basename(Constant_1.Constant.LogFilePath);
            Utils_1.Utils.exeCMD(dir, basename);
        }
        else {
            console.log("暂无日志");
        }
    }
}
exports.CmdExecute = CmdExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ21kRXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9DbWRFeGVjdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUEwQjtBQUMxQixnREFBd0I7QUFDeEIsMkNBQXdDO0FBQ3hDLCtDQUE0QztBQUM1QywyQ0FBd0M7QUFDeEMseUNBQXNDO0FBRXRDLE1BQWEsVUFBVTtJQUVuQixXQUFXO0lBQ0osTUFBTSxDQUFDLElBQUk7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksR0FBRyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsbUJBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxJQUFJLFFBQVEsR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbkQsZUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqQixlQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3RCLGFBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFHRCxnQkFBZ0I7SUFDVCxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQWU7UUFDekMsZUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxTQUFTO0lBQ0YsTUFBTSxDQUFDLFNBQVM7UUFDbkIsSUFBSSxPQUFPLEdBQUcsYUFBSyxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7UUFDM0MsSUFBSSxPQUFPLEdBQUcsbUJBQW1CLENBQUM7UUFDbEMsSUFBSSxLQUFLLEdBQUcsYUFBSyxDQUFDLFdBQVcsR0FBRywyQkFBMkIsQ0FBQztRQUM1RCxrQkFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztR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RUFBRTtZQUNyQyxJQUFJLEdBQUcsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0MsSUFBSSxRQUFRLEdBQUcsY0FBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ25ELGFBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztDQUtKO0FBdExELGdDQXNMQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcclxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vdG9vbHMvQ29uZmlnXCI7XHJcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSBcIi4vdG9vbHMvQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4vdG9vbHMvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4vdG9vbHMvVXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDbWRFeGVjdXRlIHtcclxuXHJcbiAgICAvKiog5Yqf6IO95rWL6K+VICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRlc3QoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLmtYvor5VcIik7XHJcbiAgICAgICAgbGV0IGRpciA9IHBhdGguZGlybmFtZShDb25zdGFudC5Mb2dGaWxlUGF0aCk7XHJcbiAgICAgICAgbGV0IGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZShDb25zdGFudC5Mb2dGaWxlUGF0aCk7XHJcbiAgICAgICAgTG9nZ2VyLmRlYnVnKGRpcilcclxuICAgICAgICBMb2dnZXIuZGVidWcoYmFzZW5hbWUpXHJcbiAgICAgICAgVXRpbHMuZXhlQ01EKGRpciwgYmFzZW5hbWUpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKiog5L+d5a2Y5ri45oiP6YWN572u5Yiw5pys5ZywICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNhdmVHYW1lU2V0dGluZyhqc29uU3RyOiBzdHJpbmcpIHtcclxuICAgICAgICBDb25maWcuc2V0KFwiZ2FtZVNldHRpbmdcIiwgSlNPTi5wYXJzZShqc29uU3RyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWvvOihqCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBsb2FkRXhjZWwoKSB7XHJcbiAgICAgICAgbGV0IHdvcmtEaXIgPSBVdGlscy5Qcm9qZWN0UGF0aCArIFwiL2V4Y2VsXCI7XHJcbiAgICAgICAgbGV0IGJhdFBhdGggPSBcImdlbl9jb2RlX2pzb24uYmF0XCI7XHJcbiAgICAgICAgbGV0IHRzRGlyID0gVXRpbHMuUHJvamVjdFBhdGggKyBcIi9hc3NldHMvc2NyaXB0cy9nZW4vdGFibGVcIjtcclxuICAgICAgICBmcy5lbnN1cmVEaXJTeW5jKHRzRGlyKTtcclxuICAgICAgICBMb2dnZXIuZGVidWcod29ya0RpcilcclxuICAgICAgICBVdGlscy5leGVDTUQod29ya0RpciwgYmF0UGF0aCxcclxuICAgICAgICAgICAgbXNnID0+IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5kZWJ1Zyhtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKS50aGVuKGNvZGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBidW5kbGVzID0gVXRpbHMuUHJvamVjdFBhdGggKyBcIi9hc3NldHMvYnVuZGxlc1wiO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpcnMgPSBVdGlscy5nZXRBbGxEaXJzKGJ1bmRsZXMsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgZGlycy5wdXNoKFV0aWxzLlByb2plY3RQYXRoICsgXCIvYXNzZXRzL3Jlc291cmNlc1wiKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGlyIG9mIGRpcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVEaXIgPSBkaXIgKyBcIi90YWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKHRhYmxlRGlyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5yZWZyZXNoQXNzZXQodGFibGVEaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFV0aWxzLnJlZnJlc2hBc3NldCh0c0Rpcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXCLlr7zooajlpLHotKVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog55Sf5oiQ5LiA5Lqb5bi46YePICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdlbkNvbnN0KCkge1xyXG4gICAgICAgIC8v55Sf5oiQQnVuZGxlcy5qc29uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgYnVuZGxlc0RpciA9IFV0aWxzLlByb2plY3RQYXRoICsgXCIvYXNzZXRzL2J1bmRsZXNcIjtcclxuICAgICAgICAgICAgbGV0IG91dEZpbGUgPSBVdGlscy5Qcm9qZWN0UGF0aCArIFwiL2Fzc2V0cy9zY3JpcHRzL2dlbi9CdW5kbGVDb25zdGFudC50c1wiO1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxpc3QgPSBmcy5yZWFkZGlyU3luYyhidW5kbGVzRGlyKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGJ1bmRsZXNEaXIgKyBcIi9cIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnMuc3RhdFN5bmMocGF0aCkuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYmogPSBmcy5yZWFkSlNPTlN5bmMocGF0aCArIFwiLm1ldGFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialsndXNlckRhdGEnXSAmJiBvYmpbJ3VzZXJEYXRhJ11bJ2lzQnVuZGxlJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGBleHBvcnQgY29uc3QgQnVuZGxlQ29uc3RhbnQgPSAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9O2BcclxuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhvdXRGaWxlLCBjb250ZW50KTtcclxuICAgICAgICAgICAgVXRpbHMucmVmcmVzaEFzc2V0KG91dEZpbGUpO1xyXG4gICAgICAgICAgICBMb2dnZXIuaW5mbyhcIueUn+aIkEJ1bmRsZUNvbnN0YW50LnRz5oiQ5YqfXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/nlJ/miJBVSUNvbnN0YW50XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgbWFwID0ge307XHJcbiAgICAgICAgICAgIGxldCBvdXRGaWxlID0gVXRpbHMuUHJvamVjdFBhdGggKyBcIi9hc3NldHMvc2NyaXB0cy9nZW4vVUlDb25zdGFudC50c1wiO1xyXG4gICAgICAgICAgICBsZXQgZXh0ID0gXCIucHJlZmFiXCI7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGF0aDEgPSBVdGlscy5Qcm9qZWN0UGF0aCArIFwiL2Fzc2V0cy9idW5kbGVzXCI7XHJcbiAgICAgICAgICAgIGxldCBwYXRoMiA9IFV0aWxzLlByb2plY3RQYXRoICsgXCIvYXNzZXRzL3Jlc291cmNlc1wiO1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVyID0gKGZpbGU6IHN0cmluZykgPT4gZmlsZS5lbmRzV2l0aChleHQpO1xyXG4gICAgICAgICAgICBsZXQgZmlsZXMgPSBVdGlscy5nZXRBbGxGaWxlcyhwYXRoMSwgZmlsdGVyKS5jb25jYXQoVXRpbHMuZ2V0QWxsRmlsZXMocGF0aDIsIGZpbHRlcikpO1xyXG4gICAgICAgICAgICBmaWxlcy5mb3JFYWNoKHYgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZSh2KTtcclxuICAgICAgICAgICAgICAgIGlmICh2LmluZGV4T2YoXCIvdWlQcmVmYWIvXCIpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gYmFzZW5hbWUucmVwbGFjZShleHQsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb2NhdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYuc3RhcnRzV2l0aChwYXRoMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSB2LnJlcGxhY2UocGF0aDEgKyBcIi9cIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24uc3Vic3RyaW5nKGxvY2F0aW9uLmluZGV4T2YoXCIvXCIpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2LnN0YXJ0c1dpdGgocGF0aDIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gdi5yZXBsYWNlKHBhdGgyICsgXCIvXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uLnJlcGxhY2UoZXh0LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXBbbmFtZV0gPSBsb2NhdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IFwiZXhwb3J0IGNvbnN0IFVJQ29uc3RhbnQgPSB7XFxuXCI7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1hcCkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSBgICAgICR7a2V5fTogXCIke21hcFtrZXldfVwiLFxcbmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGVudCArPSBcIn0gYXMgY29uc3Q7XCI7XHJcblxyXG4gICAgICAgICAgICBmcy5lbnN1cmVEaXJTeW5jKHBhdGguZGlybmFtZShvdXRGaWxlKSk7XHJcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMob3V0RmlsZSwgY29udGVudCk7XHJcbiAgICAgICAgICAgIFV0aWxzLnJlZnJlc2hBc3NldChvdXRGaWxlKTtcclxuICAgICAgICAgICAgTG9nZ2VyLmluZm8oXCLnlJ/miJBVSUNvbnN0YW505oiQ5YqfXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjbG9zZVRleENvbXByZXNzKCkge1xyXG4gICAgICAgIExvZ2dlci5pbmZvKFwi5YWz6Zet57q555CG5Y6L57yp5byA5aeLXCIpO1xyXG4gICAgICAgIGxldCBleHRzID0gW1wiLmpwZ1wiLCBcIi5wbmdcIiwgXCIuanBlZ1wiLCBcIi5wYWNcIl07XHJcbiAgICAgICAgbGV0IGZpbHRlciA9IChmaWxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGV4dHMuaW5jbHVkZXMoZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFsbEZpbGVzID0gVXRpbHMuZ2V0QWxsRmlsZXMoVXRpbHMuUHJvamVjdFBhdGggKyBcIi9hc3NldHNcIiwgZmlsdGVyKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgYWxsRmlsZXMpIHtcclxuICAgICAgICAgICAgaWYgKHBhdGguYmFzZW5hbWUoZmlsZSkuc3RhcnRzV2l0aChcIl9fXCIpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgbGV0IG1ldGFGaWxlID0gZmlsZSArIFwiLm1ldGFcIjtcclxuICAgICAgICAgICAgbGV0IG9iaiA9IGZzLnJlYWRKU09OU3luYyhtZXRhRmlsZSk7XHJcbiAgICAgICAgICAgIGxldCBjb21wcmVzc1NldHRpbmdzOiB7IHVzZUNvbXByZXNzVGV4dHVyZTogYm9vbGVhbiwgcHJlc2V0SWQ6IHN0cmluZyB9ID0gb2JqLnVzZXJEYXRhLmNvbXByZXNzU2V0dGluZ3M7XHJcbiAgICAgICAgICAgIGlmIChjb21wcmVzc1NldHRpbmdzICYmIGNvbXByZXNzU2V0dGluZ3MudXNlQ29tcHJlc3NUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wcmVzc1NldHRpbmdzLnVzZUNvbXByZXNzVGV4dHVyZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZnMud3JpdGVKU09OU3luYyhtZXRhRmlsZSwgb2JqLCB7IHNwYWNlczogMiB9KTtcclxuICAgICAgICAgICAgICAgIFV0aWxzLnJlZnJlc2hBc3NldChmaWxlKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5pbmZvKFwi5YWz6Zet57q555CG5Y6L57ypXCIsIGZpbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIExvZ2dlci5pbmZvKFwi5YWz6Zet57q555CG5Y6L57yp57uT5p2fXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0VGV4Q29tcHJlc3MoKSB7XHJcbiAgICAgICAgbGV0IHByZXNldElkOiBzdHJpbmcgPSBFZGl0b3IuQ2xpcGJvYXJkLnJlYWQoXCJ0ZXh0XCIpIGFzIHN0cmluZztcclxuICAgICAgICBpZiAocHJlc2V0SWQubGVuZ3RoICE9IDIyKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci53YXJuKFwi6K+35YWI5ou36LSd5LiA5Liq57q555CG5Y6L57yp6YWN572u55qEMjLkvY1VVUlE5Yiw5Ymq5YiH5p2/KOmhueebruiuvue9ri3ljovnvKnnurnnkIYt6YWN572u5Y6L57yp6aKE6K6+6ZuGKVwiKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5pbmZvKFwi57q555CG5Y6L57yp5pa55qGIVVVJRDpcIiwgcHJlc2V0SWQpO1xyXG4gICAgICAgICAgICBsZXQgZXh0cyA9IFtcIi5qcGdcIiwgXCIucG5nXCIsIFwiLmpwZWdcIiwgXCIucGFjXCJdO1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVyID0gKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHRzLmluY2x1ZGVzKGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGFsbEZpbGVzID0gVXRpbHMuZ2V0QWxsRmlsZXMoVXRpbHMuUHJvamVjdFBhdGggKyBcIi9hc3NldHNcIiwgZmlsdGVyKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGFsbEZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5iYXNlbmFtZShmaWxlKS5zdGFydHNXaXRoKFwiX19cIikpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1ldGFGaWxlID0gZmlsZSArIFwiLm1ldGFcIjtcclxuICAgICAgICAgICAgICAgIGxldCBvYmogPSBmcy5yZWFkSlNPTlN5bmMobWV0YUZpbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb21wcmVzc1NldHRpbmdzOiB7IHVzZUNvbXByZXNzVGV4dHVyZTogYm9vbGVhbiwgcHJlc2V0SWQ6IHN0cmluZyB9ID0gb2JqLnVzZXJEYXRhLmNvbXByZXNzU2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXByZXNzU2V0dGluZ3MgfHwgIWNvbXByZXNzU2V0dGluZ3MudXNlQ29tcHJlc3NUZXh0dXJlIHx8IGNvbXByZXNzU2V0dGluZ3MucHJlc2V0SWQgIT0gcHJlc2V0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q29tcHJlc3NTZXR0aW5nczogeyB1c2VDb21wcmVzc1RleHR1cmU6IGJvb2xlYW4sIHByZXNldElkOiBzdHJpbmcgfSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlQ29tcHJlc3NUZXh0dXJlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZXRJZDogcHJlc2V0SWRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVzZXJEYXRhLmNvbXByZXNzU2V0dGluZ3MgPSBuZXdDb21wcmVzc1NldHRpbmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIGZzLndyaXRlSlNPTlN5bmMobWV0YUZpbGUsIG9iaiwgeyBzcGFjZXM6IDIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbHMucmVmcmVzaEFzc2V0KGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5pbmZvKGDnurnnkIbljovnvKnorr7nva4gICR7ZmlsZX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBMb2dnZXIuaW5mbyhcIuiuvue9rue6ueeQhuWOi+e8qee7k+adn1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBvcGVuTG9nRmlsZSgpIHtcclxuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhDb25zdGFudC5Mb2dGaWxlUGF0aCkpIHtcclxuICAgICAgICAgICAgbGV0IGRpciA9IHBhdGguZGlybmFtZShDb25zdGFudC5Mb2dGaWxlUGF0aCk7XHJcbiAgICAgICAgICAgIGxldCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoQ29uc3RhbnQuTG9nRmlsZVBhdGgpO1xyXG4gICAgICAgICAgICBVdGlscy5leGVDTUQoZGlyLCBiYXNlbmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLmmoLml6Dml6Xlv5dcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxufSJdfQ==