"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onAfterMake = exports.onBeforeMake = exports.onError = exports.onAfterBuild = exports.onAfterCompressSettings = exports.onBeforeCompressSettings = exports.onBeforeBuild = void 0;
const BuildTemplate_1 = require("./postbuild/BuildTemplate");
const HotUpdate_1 = require("./postbuild/HotUpdate");
const Minigame_1 = require("./postbuild/Minigame");
const Config_1 = require("./tools/Config");
const Logger_1 = require("./tools/Logger");
const Utils_1 = require("./tools/Utils");
const onBeforeBuild = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info("onBeforeBuild");
};
exports.onBeforeBuild = onBeforeBuild;
const onBeforeCompressSettings = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info('onBeforeCompressSettings');
};
exports.onBeforeCompressSettings = onBeforeCompressSettings;
const onAfterCompressSettings = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info('onAfterCompressSettings');
};
exports.onAfterCompressSettings = onAfterCompressSettings;
const onAfterBuild = async function (options, result) {
    Logger_1.Logger.info("onAfterBuild");
    BuildTemplate_1.BuildTemplate.copy(options, result);
    if (Utils_1.Utils.isNative(options.platform)) {
        /** 是否启用热更 */
        let hotupdateEnable = Config_1.Config.get("gameSetting.hotupdate", false);
        Logger_1.Logger.info('hotupdateEnable', hotupdateEnable);
        if (hotupdateEnable) {
            HotUpdate_1.HotUpdate.modifyJsFile(options, result);
            HotUpdate_1.HotUpdate.replaceManifest(options, result);
        }
    }
    Minigame_1.Minigame.modifyServer(options, result);
};
exports.onAfterBuild = onAfterBuild;
const onError = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info("run onError");
};
exports.onError = onError;
const onBeforeMake = async function (root, options) {
    Logger_1.Logger.info(`onBeforeMake: root: ${root}, options: ${options}`);
};
exports.onBeforeMake = onBeforeMake;
const onAfterMake = async function (root, options) {
    Logger_1.Logger.info(`onAfterMake: root: ${root}, options: ${options}`);
};
exports.onAfterMake = onAfterMake;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zb3VyY2UvaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkRBQTBEO0FBQzFELHFEQUFrRDtBQUNsRCxtREFBZ0Q7QUFDaEQsMkNBQXdDO0FBQ3hDLDJDQUF3QztBQUN4Qyx5Q0FBc0M7QUFHL0IsTUFBTSxhQUFhLEdBQTRCLEtBQUssV0FBVyxPQUF5QixFQUFFLE1BQW9CO0lBQ2pILGtCQUFrQjtJQUNsQixlQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUhXLFFBQUEsYUFBYSxpQkFHeEI7QUFFSyxNQUFNLHdCQUF3QixHQUF1QyxLQUFLLFdBQVcsT0FBeUIsRUFBRSxNQUFvQjtJQUN2SSxrQkFBa0I7SUFDbEIsZUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUhXLFFBQUEsd0JBQXdCLDRCQUduQztBQUVLLE1BQU0sdUJBQXVCLEdBQXNDLEtBQUssV0FBVyxPQUF5QixFQUFFLE1BQW9CO0lBQ3JJLGtCQUFrQjtJQUNsQixlQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDO0FBSFcsUUFBQSx1QkFBdUIsMkJBR2xDO0FBRUssTUFBTSxZQUFZLEdBQTJCLEtBQUssV0FBVyxPQUF5QixFQUFFLE1BQW9CO0lBQy9HLGVBQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsNkJBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLElBQUksYUFBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDbEMsYUFBYTtRQUNiLElBQUksZUFBZSxHQUFHLGVBQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakUsZUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNoRCxJQUFJLGVBQWUsRUFBRTtZQUNqQixxQkFBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMscUJBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzlDO0tBQ0o7SUFDRCxtQkFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDO0FBYlcsUUFBQSxZQUFZLGdCQWF2QjtBQUVLLE1BQU0sT0FBTyxHQUFzQixLQUFLLFdBQVcsT0FBTyxFQUFFLE1BQU07SUFDckUsa0JBQWtCO0lBQ2xCLGVBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBSFcsUUFBQSxPQUFPLFdBR2xCO0FBRUssTUFBTSxZQUFZLEdBQTJCLEtBQUssV0FBVyxJQUFJLEVBQUUsT0FBTztJQUM3RSxlQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLGNBQWMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNwRSxDQUFDLENBQUM7QUFGVyxRQUFBLFlBQVksZ0JBRXZCO0FBRUssTUFBTSxXQUFXLEdBQTBCLEtBQUssV0FBVyxJQUFJLEVBQUUsT0FBTztJQUMzRSxlQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixJQUFJLGNBQWMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUM7QUFGVyxRQUFBLFdBQVcsZUFFdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWlsZEhvb2ssIElCdWlsZFJlc3VsdCwgSUJ1aWxkVGFza09wdGlvbiB9IGZyb20gXCJAY29jb3MvY3JlYXRvci10eXBlcy9lZGl0b3IvcGFja2FnZXMvYnVpbGRlci9AdHlwZXMvcHVibGljXCI7XHJcbmltcG9ydCB7IEJ1aWxkVGVtcGxhdGUgfSBmcm9tICcuL3Bvc3RidWlsZC9CdWlsZFRlbXBsYXRlJztcclxuaW1wb3J0IHsgSG90VXBkYXRlIH0gZnJvbSAnLi9wb3N0YnVpbGQvSG90VXBkYXRlJztcclxuaW1wb3J0IHsgTWluaWdhbWUgfSBmcm9tICcuL3Bvc3RidWlsZC9NaW5pZ2FtZSc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL3Rvb2xzL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL3Rvb2xzL0xvZ2dlcic7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi90b29scy9VdGlscyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IG9uQmVmb3JlQnVpbGQ6IEJ1aWxkSG9vay5vbkJlZm9yZUJ1aWxkID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XHJcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcclxuICAgIExvZ2dlci5pbmZvKFwib25CZWZvcmVCdWlsZFwiKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbkJlZm9yZUNvbXByZXNzU2V0dGluZ3M6IEJ1aWxkSG9vay5vbkJlZm9yZUNvbXByZXNzU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAob3B0aW9uczogSUJ1aWxkVGFza09wdGlvbiwgcmVzdWx0OiBJQnVpbGRSZXN1bHQpIHtcclxuICAgIC8vIFRvZG8gc29tZSB0aGluZ1xyXG4gICAgTG9nZ2VyLmluZm8oJ29uQmVmb3JlQ29tcHJlc3NTZXR0aW5ncycpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQWZ0ZXJDb21wcmVzc1NldHRpbmdzOiBCdWlsZEhvb2sub25BZnRlckNvbXByZXNzU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAob3B0aW9uczogSUJ1aWxkVGFza09wdGlvbiwgcmVzdWx0OiBJQnVpbGRSZXN1bHQpIHtcclxuICAgIC8vIFRvZG8gc29tZSB0aGluZ1xyXG4gICAgTG9nZ2VyLmluZm8oJ29uQWZ0ZXJDb21wcmVzc1NldHRpbmdzJyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25BZnRlckJ1aWxkOiBCdWlsZEhvb2sub25BZnRlckJ1aWxkID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XHJcbiAgICBMb2dnZXIuaW5mbyhcIm9uQWZ0ZXJCdWlsZFwiKTtcclxuICAgIEJ1aWxkVGVtcGxhdGUuY29weShvcHRpb25zLCByZXN1bHQpO1xyXG4gICAgaWYgKFV0aWxzLmlzTmF0aXZlKG9wdGlvbnMucGxhdGZvcm0pKSB7XHJcbiAgICAgICAgLyoqIOaYr+WQpuWQr+eUqOeDreabtCAqL1xyXG4gICAgICAgIGxldCBob3R1cGRhdGVFbmFibGUgPSBDb25maWcuZ2V0KFwiZ2FtZVNldHRpbmcuaG90dXBkYXRlXCIsIGZhbHNlKTtcclxuICAgICAgICBMb2dnZXIuaW5mbygnaG90dXBkYXRlRW5hYmxlJywgaG90dXBkYXRlRW5hYmxlKTtcclxuICAgICAgICBpZiAoaG90dXBkYXRlRW5hYmxlKSB7XHJcbiAgICAgICAgICAgIEhvdFVwZGF0ZS5tb2RpZnlKc0ZpbGUob3B0aW9ucywgcmVzdWx0KTtcclxuICAgICAgICAgICAgSG90VXBkYXRlLnJlcGxhY2VNYW5pZmVzdChvcHRpb25zLCByZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE1pbmlnYW1lLm1vZGlmeVNlcnZlcihvcHRpb25zLCByZXN1bHQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uRXJyb3I6IEJ1aWxkSG9vay5vbkVycm9yID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnMsIHJlc3VsdCkge1xyXG4gICAgLy8gVG9kbyBzb21lIHRoaW5nXHJcbiAgICBMb2dnZXIuaW5mbyhcInJ1biBvbkVycm9yXCIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQmVmb3JlTWFrZTogQnVpbGRIb29rLm9uQmVmb3JlTWFrZSA9IGFzeW5jIGZ1bmN0aW9uIChyb290LCBvcHRpb25zKSB7XHJcbiAgICBMb2dnZXIuaW5mbyhgb25CZWZvcmVNYWtlOiByb290OiAke3Jvb3R9LCBvcHRpb25zOiAke29wdGlvbnN9YCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25BZnRlck1ha2U6IEJ1aWxkSG9vay5vbkFmdGVyTWFrZSA9IGFzeW5jIGZ1bmN0aW9uIChyb290LCBvcHRpb25zKSB7XHJcbiAgICBMb2dnZXIuaW5mbyhgb25BZnRlck1ha2U6IHJvb3Q6ICR7cm9vdH0sIG9wdGlvbnM6ICR7b3B0aW9uc31gKTtcclxufTtcclxuIl19