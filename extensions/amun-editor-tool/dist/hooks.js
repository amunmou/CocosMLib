"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onAfterMake = exports.onBeforeMake = exports.onError = exports.onAfterBuild = exports.onAfterCompressSettings = exports.onBeforeCompressSettings = exports.onBeforeBuild = void 0;
const BuildTemplate_1 = require("./postbuild/BuildTemplate");
const HotUpdate_1 = require("./postbuild/HotUpdate");
const Minigame_1 = require("./postbuild/Minigame");
const Logger_1 = require("./tools/Logger");
const Utils_1 = require("./tools/Utils");
const onBeforeBuild = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info("onBeforeBuild");
};
exports.onBeforeBuild = onBeforeBuild;
const onBeforeCompressSettings = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info('onBeforeCompressSettings');
};
exports.onBeforeCompressSettings = onBeforeCompressSettings;
const onAfterCompressSettings = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info('onAfterCompressSettings');
};
exports.onAfterCompressSettings = onAfterCompressSettings;
const onAfterBuild = async function (options, result) {
    Logger_1.Logger.info("onAfterBuild");
    BuildTemplate_1.BuildTemplate.copy(options, result);
    if (Utils_1.Utils.isNative(options.platform)) {
        Logger_1.Logger.info('hotupdateEnable', HotUpdate_1.HotUpdate.hotupdateEnable);
        HotUpdate_1.HotUpdate.modifyJsFile(options, result);
        HotUpdate_1.HotUpdate.replaceManifest(options, result);
    }
    Minigame_1.Minigame.modifyServer(options, result);
};
exports.onAfterBuild = onAfterBuild;
const onError = async function (options, result) {
    // Todo some thing
    Logger_1.Logger.info("run onError");
};
exports.onError = onError;
const onBeforeMake = async function (root, options) {
    Logger_1.Logger.info(`onBeforeMake: root: ${root}, options: ${options}`);
};
exports.onBeforeMake = onBeforeMake;
const onAfterMake = async function (root, options) {
    Logger_1.Logger.info(`onAfterMake: root: ${root}, options: ${options}`);
};
exports.onAfterMake = onAfterMake;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zb3VyY2UvaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkRBQTBEO0FBQzFELHFEQUFrRDtBQUNsRCxtREFBZ0Q7QUFDaEQsMkNBQXdDO0FBQ3hDLHlDQUFzQztBQUcvQixNQUFNLGFBQWEsR0FBNEIsS0FBSyxXQUFXLE9BQXlCLEVBQUUsTUFBb0I7SUFDakgsa0JBQWtCO0lBQ2xCLGVBQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBSFcsUUFBQSxhQUFhLGlCQUd4QjtBQUVLLE1BQU0sd0JBQXdCLEdBQXVDLEtBQUssV0FBVyxPQUF5QixFQUFFLE1BQW9CO0lBQ3ZJLGtCQUFrQjtJQUNsQixlQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBSFcsUUFBQSx3QkFBd0IsNEJBR25DO0FBRUssTUFBTSx1QkFBdUIsR0FBc0MsS0FBSyxXQUFXLE9BQXlCLEVBQUUsTUFBb0I7SUFDckksa0JBQWtCO0lBQ2xCLGVBQU0sQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUM7QUFIVyxRQUFBLHVCQUF1QiwyQkFHbEM7QUFFSyxNQUFNLFlBQVksR0FBMkIsS0FBSyxXQUFXLE9BQXlCLEVBQUUsTUFBb0I7SUFDL0csZUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1Qiw2QkFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEMsSUFBSSxhQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNsQyxlQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLHFCQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUQscUJBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLHFCQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM5QztJQUNELG1CQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUM7QUFUVyxRQUFBLFlBQVksZ0JBU3ZCO0FBRUssTUFBTSxPQUFPLEdBQXNCLEtBQUssV0FBVyxPQUFPLEVBQUUsTUFBTTtJQUNyRSxrQkFBa0I7SUFDbEIsZUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFIVyxRQUFBLE9BQU8sV0FHbEI7QUFFSyxNQUFNLFlBQVksR0FBMkIsS0FBSyxXQUFXLElBQUksRUFBRSxPQUFPO0lBQzdFLGVBQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLElBQUksY0FBYyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLENBQUMsQ0FBQztBQUZXLFFBQUEsWUFBWSxnQkFFdkI7QUFFSyxNQUFNLFdBQVcsR0FBMEIsS0FBSyxXQUFXLElBQUksRUFBRSxPQUFPO0lBQzNFLGVBQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLElBQUksY0FBYyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQztBQUZXLFFBQUEsV0FBVyxlQUV0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWxkSG9vaywgSUJ1aWxkUmVzdWx0LCBJQnVpbGRUYXNrT3B0aW9uIH0gZnJvbSBcIkBjb2Nvcy9jcmVhdG9yLXR5cGVzL2VkaXRvci9wYWNrYWdlcy9idWlsZGVyL0B0eXBlcy9wdWJsaWNcIjtcclxuaW1wb3J0IHsgQnVpbGRUZW1wbGF0ZSB9IGZyb20gJy4vcG9zdGJ1aWxkL0J1aWxkVGVtcGxhdGUnO1xyXG5pbXBvcnQgeyBIb3RVcGRhdGUgfSBmcm9tICcuL3Bvc3RidWlsZC9Ib3RVcGRhdGUnO1xyXG5pbXBvcnQgeyBNaW5pZ2FtZSB9IGZyb20gJy4vcG9zdGJ1aWxkL01pbmlnYW1lJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi90b29scy9Mb2dnZXInO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4vdG9vbHMvVXRpbHMnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBvbkJlZm9yZUJ1aWxkOiBCdWlsZEhvb2sub25CZWZvcmVCdWlsZCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zOiBJQnVpbGRUYXNrT3B0aW9uLCByZXN1bHQ6IElCdWlsZFJlc3VsdCkge1xyXG4gICAgLy8gVG9kbyBzb21lIHRoaW5nXHJcbiAgICBMb2dnZXIuaW5mbyhcIm9uQmVmb3JlQnVpbGRcIik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25CZWZvcmVDb21wcmVzc1NldHRpbmdzOiBCdWlsZEhvb2sub25CZWZvcmVDb21wcmVzc1NldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XHJcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcclxuICAgIExvZ2dlci5pbmZvKCdvbkJlZm9yZUNvbXByZXNzU2V0dGluZ3MnKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbkFmdGVyQ29tcHJlc3NTZXR0aW5nczogQnVpbGRIb29rLm9uQWZ0ZXJDb21wcmVzc1NldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XHJcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcclxuICAgIExvZ2dlci5pbmZvKCdvbkFmdGVyQ29tcHJlc3NTZXR0aW5ncycpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQWZ0ZXJCdWlsZDogQnVpbGRIb29rLm9uQWZ0ZXJCdWlsZCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zOiBJQnVpbGRUYXNrT3B0aW9uLCByZXN1bHQ6IElCdWlsZFJlc3VsdCkge1xyXG4gICAgTG9nZ2VyLmluZm8oXCJvbkFmdGVyQnVpbGRcIik7XHJcbiAgICBCdWlsZFRlbXBsYXRlLmNvcHkob3B0aW9ucywgcmVzdWx0KTtcclxuICAgIGlmIChVdGlscy5pc05hdGl2ZShvcHRpb25zLnBsYXRmb3JtKSkge1xyXG4gICAgICAgIExvZ2dlci5pbmZvKCdob3R1cGRhdGVFbmFibGUnLCBIb3RVcGRhdGUuaG90dXBkYXRlRW5hYmxlKTtcclxuICAgICAgICBIb3RVcGRhdGUubW9kaWZ5SnNGaWxlKG9wdGlvbnMsIHJlc3VsdCk7XHJcbiAgICAgICAgSG90VXBkYXRlLnJlcGxhY2VNYW5pZmVzdChvcHRpb25zLCByZXN1bHQpO1xyXG4gICAgfVxyXG4gICAgTWluaWdhbWUubW9kaWZ5U2VydmVyKG9wdGlvbnMsIHJlc3VsdCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25FcnJvcjogQnVpbGRIb29rLm9uRXJyb3IgPSBhc3luYyBmdW5jdGlvbiAob3B0aW9ucywgcmVzdWx0KSB7XHJcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcclxuICAgIExvZ2dlci5pbmZvKFwicnVuIG9uRXJyb3JcIik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25CZWZvcmVNYWtlOiBCdWlsZEhvb2sub25CZWZvcmVNYWtlID0gYXN5bmMgZnVuY3Rpb24gKHJvb3QsIG9wdGlvbnMpIHtcclxuICAgIExvZ2dlci5pbmZvKGBvbkJlZm9yZU1ha2U6IHJvb3Q6ICR7cm9vdH0sIG9wdGlvbnM6ICR7b3B0aW9uc31gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbkFmdGVyTWFrZTogQnVpbGRIb29rLm9uQWZ0ZXJNYWtlID0gYXN5bmMgZnVuY3Rpb24gKHJvb3QsIG9wdGlvbnMpIHtcclxuICAgIExvZ2dlci5pbmZvKGBvbkFmdGVyTWFrZTogcm9vdDogJHtyb290fSwgb3B0aW9uczogJHtvcHRpb25zfWApO1xyXG59O1xyXG4iXX0=