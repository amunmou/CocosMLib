"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const Constant_1 = require("./Constant");
/** 保存和读取本地配置 */
class Config {
    static get data() {
        let obj;
        try {
            obj = fs_extra_1.default.readJSONSync(Constant_1.Constant.ConfigFilePath);
        }
        catch (e) {
            obj = {};
        }
        return obj;
    }
    static get(key, defaultV) {
        let d = this.data;
        let arr = key.split(".");
        let v = d;
        for (let i = 0; i < arr.length; i++) {
            const k = arr[i];
            v = v[k];
            if (i < arr.length - 1) {
                if (v === undefined) {
                    v = defaultV;
                    this.set(key, defaultV);
                    break;
                }
                if (typeof v !== "object") {
                    v = defaultV;
                    console.error(`${k}的值不是一个对象`);
                    break;
                }
            }
        }
        return v;
    }
    static set(key, value) {
        let d = this.data;
        if (d) {
            let arr = key.split(".");
            let v = d;
            for (let i = 0; i < arr.length; i++) {
                const k = arr[i];
                if (i == arr.length - 1) {
                    v[k] = value;
                }
                else {
                    if (v[k] == undefined)
                        v[k] = {};
                    v = v[k];
                    if (typeof v != "object") {
                        console.error(`${k}的值不是一个对象`);
                        return;
                    }
                }
            }
            fs_extra_1.default.writeJSONSync(Constant_1.Constant.ConfigFilePath, d, { spaces: 4 });
        }
    }
}
exports.Config = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc291cmNlL3Rvb2xzL0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3REFBMEI7QUFDMUIseUNBQXNDO0FBQ3RDLGdCQUFnQjtBQUNoQixNQUFhLE1BQU07SUFFUixNQUFNLEtBQUssSUFBSTtRQUNsQixJQUFJLEdBQVEsQ0FBQztRQUNiLElBQUk7WUFDQSxHQUFHLEdBQUcsa0JBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNsRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsR0FBRyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBSSxHQUFXLEVBQUUsUUFBVztRQUN6QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2xCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFNLENBQUM7WUFDZCxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUNqQixDQUFDLEdBQUcsUUFBUSxDQUFDO29CQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUN4QixNQUFNO2lCQUNUO2dCQUNELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO29CQUN2QixDQUFDLEdBQUcsUUFBUSxDQUFDO29CQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM5QixNQUFNO2lCQUNUO2FBQ0o7U0FDSjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQVU7UUFDckMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsRUFBRTtZQUNILElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3JCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2hCO3FCQUFNO29CQUNILElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVM7d0JBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDakMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDVCxJQUFJLE9BQU8sQ0FBQyxJQUFJLFFBQVEsRUFBRTt3QkFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQzlCLE9BQU87cUJBQ1Y7aUJBQ0o7YUFDSjtZQUNELGtCQUFFLENBQUMsYUFBYSxDQUFDLG1CQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQy9EO0lBQ0wsQ0FBQztDQUNKO0FBdkRELHdCQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbi8qKiDkv53lrZjlkozor7vlj5bmnKzlnLDphY3nva4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgZGF0YSgpIHtcbiAgICAgICAgbGV0IG9iajogYW55O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2JqID0gZnMucmVhZEpTT05TeW5jKENvbnN0YW50LkNvbmZpZ0ZpbGVQYXRoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb2JqID0ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQ8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWOiBUKSB7XG4gICAgICAgIGxldCBkID0gdGhpcy5kYXRhO1xuICAgICAgICBsZXQgYXJyID0ga2V5LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgbGV0IHYgPSBkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgayA9IGFycltpXTtcbiAgICAgICAgICAgIHYgPSB2W2tdIGFzIFQ7XG4gICAgICAgICAgICBpZiAoaSA8IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2ID0gZGVmYXVsdFY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgZGVmYXVsdFYpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHYgPSBkZWZhdWx0VjtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtrfeeahOWAvOS4jeaYr+S4gOS4quWvueixoWApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLmRhdGE7XG4gICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICBsZXQgYXJyID0ga2V5LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgIGxldCB2ID0gZDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgayA9IGFycltpXTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2W2tdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZba10gPT0gdW5kZWZpbmVkKSB2W2tdID0ge307XG4gICAgICAgICAgICAgICAgICAgIHYgPSB2W2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtrfeeahOWAvOS4jeaYr+S4gOS4quWvueixoWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnMud3JpdGVKU09OU3luYyhDb25zdGFudC5Db25maWdGaWxlUGF0aCwgZCwgeyBzcGFjZXM6IDQgfSk7XG4gICAgICAgIH1cbiAgICB9XG59Il19