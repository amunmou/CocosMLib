
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 6.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
	};
	uniform sampler2D uTex;

    
	vec4 CyberpunkStyle_main(sampler2D Tex, vec2 UV, float Intensity) 
	{
	    vec4 mainColor = texture2D(Tex, UV);
	    vec3 xyz = mainColor.rgb;
	    float oldx = xyz.x;
	    float oldy = xyz.y;
	    float add = abs(oldx - oldy) * 0.5;
	    float stepxy = step(xyz.y, xyz.x);
	    float stepyx = 1.0 - stepxy;
	    xyz.x = stepxy * (oldx + add) + stepyx * (oldx - add);
	    xyz.y = stepyx * (oldy + add) + stepxy * (oldy - add);
	    xyz.z = sqrt(xyz.z);
	    return vec4(mix(mainColor.rgb, xyz, Intensity), mainColor.a);
	}
	void main () {
	    gl_FragColor = CyberpunkStyle_main(texture, v_uv0, uIntensity);
	} 
	
}%
        