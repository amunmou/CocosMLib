{
  "ver": "1.0.27",
  "uuid": "0034bc64-8e89-4013-864e-df66eba31f63",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uEdge;\nvec4 ThermalVisual_main(vec4 MainColor, float Edge)\n{\n    float lum = (MainColor.r + MainColor.g + MainColor.b) / 3.0;\n    vec3 colour_1 = vec3(0.0, 0.0, 1.0);\n    vec3 colour_2 = vec3(1.0, 1.0, 0.0);\n    vec3 colour_3 = vec3(1.0, 0.0, 0.0);\n    vec3 ix = vec3(0.0);\n    vec3 ix_2 = vec3(0.0);\n    if (lum < Edge) {\n        ix = colour_1;\n        ix_2 = colour_2;\n    }\n    else {\n        ix = colour_2;\n        ix_2 = colour_3;\n    }\n    vec3 thermal = mix(ix, ix_2, (lum - float(ix) * 0.5) / 0.5);\n    return vec4(thermal, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = ThermalVisual_main(texture2D(texture, v_uv0), uEdge);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uEdge;\n};\nvec4 ThermalVisual_main(vec4 MainColor, float Edge)\n{\n    float lum = (MainColor.r + MainColor.g + MainColor.b) / 3.0;\n    vec3 colour_1 = vec3(0.0, 0.0, 1.0);\n    vec3 colour_2 = vec3(1.0, 1.0, 0.0);\n    vec3 colour_3 = vec3(1.0, 0.0, 0.0);\n    vec3 ix = vec3(0.0);\n    vec3 ix_2 = vec3(0.0);\n    if (lum < Edge) {\n        ix = colour_1;\n        ix_2 = colour_2;\n    }\n    else {\n        ix = colour_2;\n        ix_2 = colour_3;\n    }\n    vec3 thermal = mix(ix, ix_2, (lum - float(ix) * 0.5) / 0.5);\n    return vec4(thermal, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = ThermalVisual_main(texture2D(texture, v_uv0), uEdge);\n}"
      }
    }
  ],
  "subMetas": {}
}