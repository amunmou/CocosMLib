
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uRadius: 
            value: 0.8
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uRadius;
	};
	uniform sampler2D uTex;

    
	vec4 ImageBokeh_main(sampler2D Tex, vec2 UV, vec2 Size, float Radius) 
	{
	    vec3 acc = vec3(0.0);
	    vec3 div = vec3(0.0);
	    vec2 pixel = 1.0 / Size;
	    float r = 1.0;
	    vec2 vangle = vec2(0.0, Radius);
	    mat2 rot = mat2(cos(2.39996323), sin(2.39996323), -sin(2.39996323), cos(2.39996323));
	    for (int j = 0; j < 10; j++)
	    {  
	        r += 1. / r;
	        vangle = rot * vangle;
	        vec3 col = texture2D(Tex, UV + pixel * (r-1.) * vangle).xyz;
	        col = col * col * 1.5;
	    	vec3 bokeh = pow(col, vec3(9.0)) + 0.4;
	    	acc += col * bokeh;
	    	div += bokeh;
	    }
	    return vec4(acc / div, texture2D(Tex, UV).a);
	}
	    
	void main () {
	    gl_FragColor = ImageBokeh_main(texture, v_uv0, uSize, uRadius);
	} 
	
}%
        