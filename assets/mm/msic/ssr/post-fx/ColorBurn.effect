
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 2.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
	};

    vec3 burn(float t, float intensity) 
	{
	    float u = (0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t * t) / (1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t * t);
	    float v = (0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t * t) / (1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t * t);
	    float kuv = 2.0 * u - 8.0 * v + 4.0;
	    float x = 3.0 * u / kuv;
	    float y = 2.0 * v / kuv;
	    float z = 1.0 - x - y;
	    float Y = 1.0;
	    float YY = Y / y;
	    float X = YY * x;
	    float Z = YY * z;
	    vec3 color = vec3(X, Y, Z);
	    color.x = color.x * pow(0.0006 * t * intensity, 4.0) / intensity;
	    color.y = color.y * pow(0.0004 * t * intensity, 4.0) / intensity;
	    color.z = color.z * pow(0.0004 * t * intensity, 4.0) * intensity;
	    return color;
	}
	vec4 ColorBurn_main(vec4 MainColor, float Intensity) 
	{
	    float lum = dot(MainColor.rgb, vec3(0.2126, 0.7152, 0.0722));
	    vec3 c = burn(lum * 4000.0, Intensity);
	    c += MainColor.rgb;
	    return vec4(c, MainColor.a);
	}
	void main () {
	    gl_FragColor = ColorBurn_main(texture2D(texture, v_uv0), uIntensity);
	} 
	
}%
        