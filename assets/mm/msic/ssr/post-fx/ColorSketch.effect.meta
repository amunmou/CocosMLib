{
  "ver": "1.0.27",
  "uuid": "695004dc-f1c1-48f4-a3de-60259931139a",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec4 uBgColor;\nuniform vec4 uLineColor;\nuniform float uIntensity;\nuniform float uEdge;\nuniform sampler2D uTex;\nvec4 ColorSketch_main(sampler2D Tex, vec2 UV, float Intensity, float Edge, vec4 BgColor, vec4 LineColor)\n{\n    vec2 step = vec2(Edge / 1000.0);\n    vec4 texColor = texture2D(Tex, UV);\n    vec3 texA = texture2D(Tex, UV + vec2(-step.x, -step.y) * Intensity).rgb;\n    vec3 texB = texture2D(Tex, UV + vec2( step.x, -step.y) * Intensity).rgb;\n    vec3 texC = texture2D(Tex, UV + vec2(-step.x,  step.y) * Intensity).rgb;\n    vec3 texD = texture2D(Tex, UV + vec2( step.x,  step.y) * Intensity).rgb;\n    float shadeA = dot(texA, vec3(0.333333, 0.333333, 0.333333));\n    float shadeB = dot(texB, vec3(0.333333, 0.333333, 0.333333));\n    float shadeC = dot(texC, vec3(0.333333, 0.333333, 0.333333));\n    float shadeD = dot(texD, vec3(0.333333, 0.333333, 0.333333));\n    float shade = 15.0 * pow(max(abs(shadeA - shadeD), abs(shadeB - shadeC)), 0.5);\n    vec3 col = mix(BgColor.rgb, LineColor.rgb, shade);\n    return vec4(col, texColor.a);\n}\nvoid main () {\n    gl_FragColor = ColorSketch_main(texture, v_uv0, uIntensity, uEdge, uBgColor, uLineColor);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec4 uBgColor;\n  vec4 uLineColor;\n  float uIntensity;\n  float uEdge;\n};\nuniform sampler2D uTex;\nvec4 ColorSketch_main(sampler2D Tex, vec2 UV, float Intensity, float Edge, vec4 BgColor, vec4 LineColor)\n{\n    vec2 step = vec2(Edge / 1000.0);\n    vec4 texColor = texture2D(Tex, UV);\n    vec3 texA = texture2D(Tex, UV + vec2(-step.x, -step.y) * Intensity).rgb;\n    vec3 texB = texture2D(Tex, UV + vec2( step.x, -step.y) * Intensity).rgb;\n    vec3 texC = texture2D(Tex, UV + vec2(-step.x,  step.y) * Intensity).rgb;\n    vec3 texD = texture2D(Tex, UV + vec2( step.x,  step.y) * Intensity).rgb;\n    float shadeA = dot(texA, vec3(0.333333, 0.333333, 0.333333));\n    float shadeB = dot(texB, vec3(0.333333, 0.333333, 0.333333));\n    float shadeC = dot(texC, vec3(0.333333, 0.333333, 0.333333));\n    float shadeD = dot(texD, vec3(0.333333, 0.333333, 0.333333));\n    float shade = 15.0 * pow(max(abs(shadeA - shadeD), abs(shadeB - shadeC)), 0.5);\n    vec3 col = mix(BgColor.rgb, LineColor.rgb, shade);\n    return vec4(col, texColor.a);\n}\nvoid main () {\n    gl_FragColor = ColorSketch_main(texture, v_uv0, uIntensity, uEdge, uBgColor, uLineColor);\n}"
      }
    }
  ],
  "subMetas": {}
}