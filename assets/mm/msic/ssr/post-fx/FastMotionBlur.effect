
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uAngle: 
            value: 2.0
          uDist: 
            value: 1.4
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uAngle;
		float uDist;
	};
	uniform sampler2D uTex;

    vec4 FastMotionBlur_main(sampler2D Tex, vec2 UV, float Angle, float Dist)
	{
	    Angle = Angle * 3.1415926;
	    #define rot(n) (n * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle)))
	    vec4 r = vec4(0, 0, 0, 0);
	    Dist = Dist * 0.005;
	    r += texture2D(Tex, UV + rot(vec2(-Dist, -Dist)));
	    r += texture2D(Tex, UV + rot(vec2(-Dist * 2.0, -Dist * 2.0)));
	    r += texture2D(Tex, UV + rot(vec2(-Dist * 3.0, -Dist * 3.0)));
	    r += texture2D(Tex, UV + rot(vec2(-Dist * 4.0, -Dist * 4.0)));
	    r += texture2D(Tex, UV);
	    r += texture2D(Tex, UV + rot(vec2( Dist, Dist)));
	    r += texture2D(Tex, UV + rot(vec2( Dist * 2.0, Dist * 2.0)));
	    r += texture2D(Tex, UV + rot(vec2( Dist * 3.0, Dist * 3.0)));
	    r += texture2D(Tex, UV + rot(vec2( Dist * 4.0, Dist * 4.0)));
	    r = r / 9.0; 
	    return r;
	}
	void main () {
	    gl_FragColor = FastMotionBlur_main(texture, v_uv0, uAngle, uDist);
	} 
	
}%
        