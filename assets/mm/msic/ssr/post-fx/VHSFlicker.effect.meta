{
  "ver": "1.0.27",
  "uuid": "75a60973-7921-4d01-a108-c116d16e7496",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uIntensity;\nuniform float uDistort;\nuniform sampler2D uTex;\n  float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 VHSFlicker_main(sampler2D Tex, vec2 UV, float Seed, float Intensity, float Distort)\n{\n    Distort = Distort / 100.0;\n    vec4 col = texture2D(Tex, UV);\n    float y = floor(UV.y);\n    float disf = 0.01 * (cos(UV.y) + sin(UV.y));\n    float parity = 0.0;\n    if(mod(y, 2.0) > 0.5)\n        parity = 1.0;\n    else\n        parity = -1.0;\n    float a = smoothstep(0.0, 1.0, 0.7);\n    UV.x =   Distort * a * (y * 0.3 + disf) + UV.x + Distort * 0.5 * parity * smoothstep(0.6, 0.65, 0.7) * (sin(UV.y * (12.0 + 40.0 * rand(vec2(Seed, -Seed))) + smoothstep(0.64, 0.65, 0.7)));\n    vec4 colorInput = texture2D(Tex, UV);\n    return mix(col, colorInput, Intensity);\n}\nvoid main () {\n    gl_FragColor = VHSFlicker_main(texture, v_uv0, cc_time[0], uIntensity, uDistort);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uIntensity;\n  float uDistort;\n};\nuniform sampler2D uTex;\n  float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 VHSFlicker_main(sampler2D Tex, vec2 UV, float Seed, float Intensity, float Distort)\n{\n    Distort = Distort / 100.0;\n    vec4 col = texture2D(Tex, UV);\n    float y = floor(UV.y);\n    float disf = 0.01 * (cos(UV.y) + sin(UV.y));\n    float parity = 0.0;\n    if(mod(y, 2.0) > 0.5)\n        parity = 1.0;\n    else\n        parity = -1.0;\n    float a = smoothstep(0.0, 1.0, 0.7);\n    UV.x =   Distort * a * (y * 0.3 + disf) + UV.x + Distort * 0.5 * parity * smoothstep(0.6, 0.65, 0.7) * (sin(UV.y * (12.0 + 40.0 * rand(vec2(Seed, -Seed))) + smoothstep(0.64, 0.65, 0.7)));\n    vec4 colorInput = texture2D(Tex, UV);\n    return mix(col, colorInput, Intensity);\n}\nvoid main () {\n    gl_FragColor = VHSFlicker_main(texture, v_uv0, cc_time[0], uIntensity, uDistort);\n}"
      }
    }
  ],
  "subMetas": {}
}