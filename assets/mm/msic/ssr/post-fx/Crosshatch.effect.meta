{
  "ver": "1.0.27",
  "uuid": "8810fdaa-8814-4e9a-89c1-316774d41b98",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uIntensity;\nuniform sampler2D uTex;\n  float lookup(sampler2D tex, vec2 p, float dx, float dy, vec2 resStep)\n{\n    vec4 c = texture2D(tex, (p.xy + vec2(dx, dy)) * resStep);\n    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;\n}\nvec4 Crosshatch_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 resStep = vec2(1.0 / Size);\n    vec3 res = vec3(1.0, 1.0, 1.0);\n    vec4 tex = texture2D(Tex, UV);\n    float brightness = (0.2126 * tex.r) + (0.7152 * tex.g) + (0.0722 * tex.b);\n    float dimmestChannel = min(min(tex.r, tex.g), tex.b);\n    float brightestChannel = max(max(tex.r, tex.g), tex.b);\n    float delta = brightestChannel - dimmestChannel;\n    if (delta > 0.1)\n        tex = tex * (1.0 / brightestChannel);\n    else\n        tex.rgb = vec3(1.0, 1.0, 1.0);\n    vec2 iText = UV * Size.xy;\n    float iTextA = iText.x  + iText.y;\n    float iTextS = iText.x  - iText.y;\n    if (brightness < 0.8) {\n        if (mod(iTextA, 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.8);\n        }\n    }\n    if (brightness < 0.6) {\n        if (mod(iTextS, 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.6);\n        }\n    }\n    if (brightness < 0.3) {\n        if (mod(iTextA - 5., 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.3);\n        }\n    }\n    if (brightness < 0.15) {\n        if (mod(iTextS - 5., 10.) <= Intensity) {\n            res = vec3(0.,0.,0.);\n        }\n    }\n    vec2 p = iText;\n    float gx = 0.0;\n    float gy = 0.0;\n    float precalLookup = lookup(Tex, p, -1.0, -1.0, resStep);\n    gx += -precalLookup;\n    gy += -precalLookup;\n    precalLookup = lookup(Tex, p, -1.0,  0.0, resStep);\n    gx += -2.0 * precalLookup;\n    gx += -precalLookup;\n    precalLookup = lookup(Tex, p,  1.0, -1.0, resStep);\n    gx +=  precalLookup;\n    gy += -precalLookup;\n    gx +=  2.0 * lookup(Tex, p,  1.0,  0.0, resStep);\n    gx +=  lookup(Tex, p,  1.0,  1.0, resStep);\n    gy +=  lookup(Tex, p,  1.0,  1.0, resStep);\n    gy += -2.0 * lookup(Tex, p,  0.0, -1.0, resStep);\n    gy +=  lookup(Tex, p, -1.0,  1.0, resStep);\n    gy +=  2.0 * lookup(Tex, p,  0.0,  1.0, resStep);\n    float g = gx * gx + gy * gy;\n    res *= (1.0 - g);\n    return vec4(res, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = Crosshatch_main(texture, v_uv0, uSize, uIntensity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uIntensity;\n};\nuniform sampler2D uTex;\n  float lookup(sampler2D tex, vec2 p, float dx, float dy, vec2 resStep)\n{\n    vec4 c = texture2D(tex, (p.xy + vec2(dx, dy)) * resStep);\n    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;\n}\nvec4 Crosshatch_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 resStep = vec2(1.0 / Size);\n    vec3 res = vec3(1.0, 1.0, 1.0);\n    vec4 tex = texture2D(Tex, UV);\n    float brightness = (0.2126 * tex.r) + (0.7152 * tex.g) + (0.0722 * tex.b);\n    float dimmestChannel = min(min(tex.r, tex.g), tex.b);\n    float brightestChannel = max(max(tex.r, tex.g), tex.b);\n    float delta = brightestChannel - dimmestChannel;\n    if (delta > 0.1)\n        tex = tex * (1.0 / brightestChannel);\n    else\n        tex.rgb = vec3(1.0, 1.0, 1.0);\n    vec2 iText = UV * Size.xy;\n    float iTextA = iText.x  + iText.y;\n    float iTextS = iText.x  - iText.y;\n    if (brightness < 0.8) {\n        if (mod(iTextA, 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.8);\n        }\n    }\n    if (brightness < 0.6) {\n        if (mod(iTextS, 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.6);\n        }\n    }\n    if (brightness < 0.3) {\n        if (mod(iTextA - 5., 10.) <= Intensity) {\n            res = vec3(tex.rgb * 0.3);\n        }\n    }\n    if (brightness < 0.15) {\n        if (mod(iTextS - 5., 10.) <= Intensity) {\n            res = vec3(0.,0.,0.);\n        }\n    }\n    vec2 p = iText;\n    float gx = 0.0;\n    float gy = 0.0;\n    float precalLookup = lookup(Tex, p, -1.0, -1.0, resStep);\n    gx += -precalLookup;\n    gy += -precalLookup;\n    precalLookup = lookup(Tex, p, -1.0,  0.0, resStep);\n    gx += -2.0 * precalLookup;\n    gx += -precalLookup;\n    precalLookup = lookup(Tex, p,  1.0, -1.0, resStep);\n    gx +=  precalLookup;\n    gy += -precalLookup;\n    gx +=  2.0 * lookup(Tex, p,  1.0,  0.0, resStep);\n    gx +=  lookup(Tex, p,  1.0,  1.0, resStep);\n    gy +=  lookup(Tex, p,  1.0,  1.0, resStep);\n    gy += -2.0 * lookup(Tex, p,  0.0, -1.0, resStep);\n    gy +=  lookup(Tex, p, -1.0,  1.0, resStep);\n    gy +=  2.0 * lookup(Tex, p,  0.0,  1.0, resStep);\n    float g = gx * gx + gy * gy;\n    res *= (1.0 - g);\n    return vec4(res, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = Crosshatch_main(texture, v_uv0, uSize, uIntensity);\n}"
      }
    }
  ],
  "subMetas": {}
}