
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 1.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uIntensity;
	};
	uniform sampler2D uTex;

    float lookup(sampler2D tex, vec2 p, float dx, float dy, vec2 resStep) 
	{
	    vec4 c = texture2D(tex, (p.xy + vec2(dx, dy)) * resStep);
	    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
	}
	vec4 Crosshatch_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec2 resStep = vec2(1.0 / Size);
	    vec3 res = vec3(1.0, 1.0, 1.0);
	    vec4 tex = texture2D(Tex, UV);
	    float brightness = (0.2126 * tex.r) + (0.7152 * tex.g) + (0.0722 * tex.b);
	    float dimmestChannel = min(min(tex.r, tex.g), tex.b);
	    float brightestChannel = max(max(tex.r, tex.g), tex.b);
	    float delta = brightestChannel - dimmestChannel;
	    if (delta > 0.1)
	        tex = tex * (1.0 / brightestChannel);
	    else
	        tex.rgb = vec3(1.0, 1.0, 1.0);
	    vec2 iText = UV * Size.xy;
	    float iTextA = iText.x  + iText.y;
	    float iTextS = iText.x  - iText.y;
	    if (brightness < 0.8) {
	        if (mod(iTextA, 10.) <= Intensity) {
	            res = vec3(tex.rgb * 0.8);
	        }
	    }
	    if (brightness < 0.6) {
	        if (mod(iTextS, 10.) <= Intensity) {
	            res = vec3(tex.rgb * 0.6);
	        }
	    }
	    if (brightness < 0.3) {
	        if (mod(iTextA - 5., 10.) <= Intensity) {
	            res = vec3(tex.rgb * 0.3);
	        }
	    }
	    if (brightness < 0.15) {
	        if (mod(iTextS - 5., 10.) <= Intensity) {
	            res = vec3(0.,0.,0.);
	        }
	    }
	    vec2 p = iText;
	    float gx = 0.0;
	    float gy = 0.0;
	    float precalLookup = lookup(Tex, p, -1.0, -1.0, resStep);
	    gx += -precalLookup;
	    gy += -precalLookup;
	    precalLookup = lookup(Tex, p, -1.0,  0.0, resStep);
	    gx += -2.0 * precalLookup;
	    gx += -precalLookup;
	    precalLookup = lookup(Tex, p,  1.0, -1.0, resStep);
	    gx +=  precalLookup;
	    gy += -precalLookup;
	    gx +=  2.0 * lookup(Tex, p,  1.0,  0.0, resStep);
	    gx +=  lookup(Tex, p,  1.0,  1.0, resStep);
	    gy +=  lookup(Tex, p,  1.0,  1.0, resStep);
	    gy += -2.0 * lookup(Tex, p,  0.0, -1.0, resStep);
	    gy +=  lookup(Tex, p, -1.0,  1.0, resStep);
	    gy +=  2.0 * lookup(Tex, p,  0.0,  1.0, resStep);
	    float g = gx * gx + gy * gy;
	    res *= (1.0 - g);
	    return vec4(res, texture2D(Tex, UV).a);
	}
	void main () {
	    gl_FragColor = Crosshatch_main(texture, v_uv0, uSize, uIntensity);
	} 
	
}%
        