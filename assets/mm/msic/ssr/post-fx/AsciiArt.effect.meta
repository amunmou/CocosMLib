{
  "ver": "1.0.27",
  "uuid": "95696cfd-a702-4807-b42e-ab4e9d22e7f9",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform sampler2D uTex;\n  float character(float n, vec2 p)\n{\n    p = floor(p * vec2(4.0, -4.0) + 2.5);\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y) {\n        float c = mod(n / exp2(p.x + 5.0 * p.y), 2.0);\n        if (int(c) == 1) return 1.0;\n    }\n    return 0.0;\n}\nvec4 AsciiArt_main(sampler2D Tex, vec2 UV, vec2 Size)\n{\n    vec2 cuv = UV * Size;\n    vec3 col = texture2D(Tex, floor(cuv / 8.0) * 8.0 / Size).rgb;\n    float gray = (col.r + col.b) / 2.0;\n    float n =  65536.0;\n    if (gray > 0.2) n = 65600.0;\n    if (gray > 0.3) n = 332772.0;\n    if (gray > 0.4) n = 15255086.0;\n    if (gray > 0.5) n = 23385164.0;\n    if (gray > 0.6) n = 15252014.0;\n    if (gray > 0.7) n = 13199452.0;\n    if (gray > 0.8) n = 11512810.0;\n    vec2 p = mod(cuv / 4.0, 2.0) - 1.0;\n    col = col * character(n, p);\n    return vec4(col, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = AsciiArt_main(texture, v_uv0, uSize);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n};\nuniform sampler2D uTex;\n  float character(float n, vec2 p)\n{\n    p = floor(p * vec2(4.0, -4.0) + 2.5);\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y) {\n        float c = mod(n / exp2(p.x + 5.0 * p.y), 2.0);\n        if (int(c) == 1) return 1.0;\n    }\n    return 0.0;\n}\nvec4 AsciiArt_main(sampler2D Tex, vec2 UV, vec2 Size)\n{\n    vec2 cuv = UV * Size;\n    vec3 col = texture2D(Tex, floor(cuv / 8.0) * 8.0 / Size).rgb;\n    float gray = (col.r + col.b) / 2.0;\n    float n =  65536.0;\n    if (gray > 0.2) n = 65600.0;\n    if (gray > 0.3) n = 332772.0;\n    if (gray > 0.4) n = 15255086.0;\n    if (gray > 0.5) n = 23385164.0;\n    if (gray > 0.6) n = 15252014.0;\n    if (gray > 0.7) n = 13199452.0;\n    if (gray > 0.8) n = 11512810.0;\n    vec2 p = mod(cuv / 4.0, 2.0) - 1.0;\n    col = col * character(n, p);\n    return vec4(col, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = AsciiArt_main(texture, v_uv0, uSize);\n}"
      }
    }
  ],
  "subMetas": {}
}