
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 1.0
          uSpeed: 
            value: 1.0
          uDistortion: 
            value: 1.0
          uLight: 
            value: 1.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
		float uSpeed;
		float uDistortion;
		float uLight;
	};
	uniform sampler2D uTex;

    float col(vec2 coord, float seed, float speed, float distortion) {
	    float time = seed;
	    float delta_theta = 0.897597901025655210989326680937;
	    float col = 0.0;
	    float theta = 0.0;
	    for (int i = 0; i < 8; i++) {
	        vec2 adjc = coord;
	        theta = delta_theta * float(i);
	        adjc.x += cos(theta) * time * speed + time * distortion;
	        adjc.y -= sin(theta) * time * speed - time * distortion;
	        col = col + cos((adjc.x * cos(theta) - adjc.y * sin(theta)) * 6.0);
	    }
	    return cos(col);
	}
	vec4 LiquidDistort_main(sampler2D Tex, vec2 UV, float Seed, float Intensity, float Speed, float Distortion, float Light)
	{
	    vec2 c1 = UV;
	    vec2 c2 = UV;
	    float cc1 = col(c1, Seed, Speed, Distortion);
	    c2.x += 8.53;
	    float dx = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;
	    c2.x = UV.x;
	    c2.y += 8.53;
	    float dy = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;
	    c1.x += dx * 2.0;
	    c1.y = (c1.y + dy * 2.0);
	    float alpha = 1.0 + dot(dx, dy) * 700.0 * Light;
	    float ddx = dx - 0.012;
	    float ddy = dy - 0.012;
	    if (ddx > 0.0 && ddy > 0.0) 
	        alpha = pow(alpha, ddx * ddy * 200000.0);
	    c1 = mix(UV, c1, Intensity);
	    vec4 col = texture2D(Tex, c1) * alpha;
	    return vec4(col.rgb, col.a);
	}
	void main () {
	    gl_FragColor = LiquidDistort_main(texture, v_uv0, cc_time[0], uIntensity, uSpeed, uDistortion, uLight);
	} 
	
}%
        