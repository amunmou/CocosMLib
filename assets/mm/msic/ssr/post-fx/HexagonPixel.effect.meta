{
  "ver": "1.0.27",
  "uuid": "e7941c35-16fb-44ba-b2c2-a7aa1e4f096c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uIntensity;\nuniform sampler2D uTex;\n  vec2 nearestHex(float s, vec2 st)\n{\n    float h = 0.5 * s;\n    float r = 0.8660254 * s;\n    float b = s + 2.0 * h;\n    float a = 2.0 * r;\n    float m = h / r;\n    vec2 sect = st/vec2(2.0 * r, h + s);\n    vec2 sectPxl = mod(st, vec2(2.0 * r, h + s));\n    float aSection = mod(floor(sect.y), 2.0);\n    vec2 coord = floor(sect);\n    if(aSection > 0.0) {\n        if(sectPxl.y < (h - sectPxl.x * m)) {\n            coord -= 1.0;\n        }\n        else if(sectPxl.y < (-h + sectPxl.x * m)) {\n            coord.y -= 1.0;\n        }\n    }\n    else {\n       if(sectPxl.x > r) {\n           if(sectPxl.y < (2.0 * h - sectPxl.x * m)) {\n               coord.y -= 1.0;\n           }\n       }\n       else {\n           if(sectPxl.y < (sectPxl.x * m)) {\n               coord.y -= 1.0;\n           }\n           else{\n               coord.x -= 1.0;\n           }\n       }\n    }\n    float xoff = mod(coord.y, 2.0) * r;\n    return vec2(coord.x * 2.0 * r - xoff, coord.y * (h + s)) + vec2(r * 2.0, s);\n}\nfloat hexDist(vec2 a, vec2 b)\n{\n    vec2 p = abs(b - a);\n    float s = 0.5;\n    float c = 0.8660254;\n    float diagDist = s * p.x + c * p.y;\n    return max(diagDist, p.x) / c;\n}\nvec4 HexagonPixel_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 uv = UV;\n    float s = Intensity * Size.x / 160.0;\n    vec2 nearest  = nearestHex(s, UV * Size);\n    vec4 texel  = texture2D(Tex, nearest / Size);\n    float dist    = hexDist(UV * Size, nearest);\n    float luminance = (texel.r + texel.g + texel.b) / 3.0;\n    float interiorSize = s;\n    float interior = 1.0 - smoothstep(interiorSize - 1.0, interiorSize, dist);\n    return vec4(texel.rgb * interior, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = HexagonPixel_main(texture, v_uv0, uSize, uIntensity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uIntensity;\n};\nuniform sampler2D uTex;\n  vec2 nearestHex(float s, vec2 st)\n{\n    float h = 0.5 * s;\n    float r = 0.8660254 * s;\n    float b = s + 2.0 * h;\n    float a = 2.0 * r;\n    float m = h / r;\n    vec2 sect = st/vec2(2.0 * r, h + s);\n    vec2 sectPxl = mod(st, vec2(2.0 * r, h + s));\n    float aSection = mod(floor(sect.y), 2.0);\n    vec2 coord = floor(sect);\n    if(aSection > 0.0) {\n        if(sectPxl.y < (h - sectPxl.x * m)) {\n            coord -= 1.0;\n        }\n        else if(sectPxl.y < (-h + sectPxl.x * m)) {\n            coord.y -= 1.0;\n        }\n    }\n    else {\n       if(sectPxl.x > r) {\n           if(sectPxl.y < (2.0 * h - sectPxl.x * m)) {\n               coord.y -= 1.0;\n           }\n       }\n       else {\n           if(sectPxl.y < (sectPxl.x * m)) {\n               coord.y -= 1.0;\n           }\n           else{\n               coord.x -= 1.0;\n           }\n       }\n    }\n    float xoff = mod(coord.y, 2.0) * r;\n    return vec2(coord.x * 2.0 * r - xoff, coord.y * (h + s)) + vec2(r * 2.0, s);\n}\nfloat hexDist(vec2 a, vec2 b)\n{\n    vec2 p = abs(b - a);\n    float s = 0.5;\n    float c = 0.8660254;\n    float diagDist = s * p.x + c * p.y;\n    return max(diagDist, p.x) / c;\n}\nvec4 HexagonPixel_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 uv = UV;\n    float s = Intensity * Size.x / 160.0;\n    vec2 nearest  = nearestHex(s, UV * Size);\n    vec4 texel  = texture2D(Tex, nearest / Size);\n    float dist    = hexDist(UV * Size, nearest);\n    float luminance = (texel.r + texel.g + texel.b) / 3.0;\n    float interiorSize = s;\n    float interior = 1.0 - smoothstep(interiorSize - 1.0, interiorSize, dist);\n    return vec4(texel.rgb * interior, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = HexagonPixel_main(texture, v_uv0, uSize, uIntensity);\n}"
      }
    }
  ],
  "subMetas": {}
}