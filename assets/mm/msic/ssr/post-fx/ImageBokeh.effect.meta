{
  "ver": "1.0.27",
  "uuid": "cd59affc-8f4d-4a29-a709-37aa7c03985f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uRadius;\nuniform sampler2D uTex;\nvec4 ImageBokeh_main(sampler2D Tex, vec2 UV, vec2 Size, float Radius)\n{\n    vec3 acc = vec3(0.0);\n    vec3 div = vec3(0.0);\n    vec2 pixel = 1.0 / Size;\n    float r = 1.0;\n    vec2 vangle = vec2(0.0, Radius);\n    mat2 rot = mat2(cos(2.39996323), sin(2.39996323), -sin(2.39996323), cos(2.39996323));\n    for (int j = 0; j < 10; j++)\n    {\n        r += 1. / r;\n        vangle = rot * vangle;\n        vec3 col = texture2D(Tex, UV + pixel * (r-1.) * vangle).xyz;\n        col = col * col * 1.5;\n      vec3 bokeh = pow(col, vec3(9.0)) + 0.4;\n      acc += col * bokeh;\n      div += bokeh;\n    }\n    return vec4(acc / div, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = ImageBokeh_main(texture, v_uv0, uSize, uRadius);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uRadius;\n};\nuniform sampler2D uTex;\nvec4 ImageBokeh_main(sampler2D Tex, vec2 UV, vec2 Size, float Radius)\n{\n    vec3 acc = vec3(0.0);\n    vec3 div = vec3(0.0);\n    vec2 pixel = 1.0 / Size;\n    float r = 1.0;\n    vec2 vangle = vec2(0.0, Radius);\n    mat2 rot = mat2(cos(2.39996323), sin(2.39996323), -sin(2.39996323), cos(2.39996323));\n    for (int j = 0; j < 10; j++)\n    {\n        r += 1. / r;\n        vangle = rot * vangle;\n        vec3 col = texture2D(Tex, UV + pixel * (r-1.) * vangle).xyz;\n        col = col * col * 1.5;\n      vec3 bokeh = pow(col, vec3(9.0)) + 0.4;\n      acc += col * bokeh;\n      div += bokeh;\n    }\n    return vec4(acc / div, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = ImageBokeh_main(texture, v_uv0, uSize, uRadius);\n}"
      }
    }
  ],
  "subMetas": {}
}