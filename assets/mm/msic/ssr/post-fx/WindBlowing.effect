
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSpeed: 
            value: 0.2
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uSpeed;
	};
	uniform sampler2D uTex;

    vec2 noiseGradientNoise(vec2 p)
	{
	    p = mod(p, 289.0);
	    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;
	    x = mod((34.0 * x + 1.0) * x, 289.0);
	    x = fract(x / 41.0) * 2.0 - 1.0;
	    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));
	}
	float noiseGradient(vec2 UV, float Scale) 
	{
	    vec2 p = UV * Scale;
	    vec2 ip = floor(p);
	    vec2 fp = fract(p);
	    float d00 = dot(noiseGradientNoise(ip), fp);
	    float d01 = dot(noiseGradientNoise(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));
	    float d10 = dot(noiseGradientNoise(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));
	    float d11 = dot(noiseGradientNoise(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));
	    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);
	    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);
	}
	vec4 WindBlowing_main(sampler2D Tex, vec2 UV, float Seed, float Speed) 
	{
	    vec2 cuv = UV * vec2(0.450, 0.0) + vec2(Seed * Speed);
	    float noiseGradientValue = noiseGradient(cuv, -16.0);
	    float cx = mix(UV.x, noiseGradientValue, 0.0);
	    float cy = mix(UV.y, noiseGradientValue, 0.030);
	    return texture2D(Tex, vec2(cx, cy));
	}
	void main () {
	    gl_FragColor = WindBlowing_main(texture, v_uv0, cc_time[0], uSpeed);
	} 
	
}%
        