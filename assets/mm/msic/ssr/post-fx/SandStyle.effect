
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uNoiseIntensity: 
            value: 0.4
          uSandIntensity: 
            value: 1.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uNoiseIntensity;
		float uSandIntensity;
	};

    float rand(vec2 co) 
	{
	    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
	}
	vec4 SandStyle_main(vec4 texColor, vec2 UV, float NoiseIntensity, float SandIntensity) 
	{
	    float lum = dot(texColor.rgb, vec3(0.222, 0.707, 0.071));
	    float noise = mix(lum, rand(UV), NoiseIntensity);
	    vec3 sandColor = vec3(noise) + vec3(0.5, 0.3, -0.5);
	    sandColor = mix(texColor.rgb, sandColor.rgb, SandIntensity);
	    return vec4(sandColor, texColor.a);
	}
	void main () {
	    gl_FragColor = SandStyle_main(texture2D(texture, v_uv0), v_uv0, uNoiseIntensity, uSandIntensity);
	} 
	
}%
        