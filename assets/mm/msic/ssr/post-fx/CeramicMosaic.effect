
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 13.2
          uGlow: 
            value: 2.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uSize;
		float uGlow;
	};
	uniform sampler2D uTex;

    
	vec4 CeramicMosaic_main(sampler2D Tex, vec2 UV, float Size, float Glow) 
	{
	    vec2 p = UV;
	    float textureResolution = Size;
	    UV = UV * textureResolution + 0.5;
	    vec2 iuv = floor(UV);
	    vec2 fuv = fract(UV);
	    vec2 fuv_2 = fuv;  
	    fuv = fuv * fuv*(3.0 - 2.0 * fuv);
	    vec2 uv_X = (iuv + fuv - 0.5)/textureResolution;
	    vec4 tex = texture2D(Tex, uv_X);
	    vec3 col_X = tex.xyz;    
	    fuv = fuv*fuv*(3.0 - 2.0 * fuv);
	    vec2 xsq = fuv * fuv;
	    vec2 xsqsq = xsq * xsq;
	    fuv = xsqsq * (25.0 - 48.0 * fuv + xsq * (25.0 - xsqsq));    
	    UV = iuv + fuv * fuv * (3.0 - 2.0 * fuv);          
	    UV = (UV - 0.5) / textureResolution;
	    vec3 colB = texture2D(Tex, UV).xyz;
	    vec3 colNoise = texture2D(Tex, UV).xyz;
	    float blendit = smoothstep(0.2, 0.8, fract(UV.x));
	    colB = mix(colB, col_X, blendit);
	    vec3 col = colB;
	    float glossFreq = mix( 0.15, 10.0, 0.13 );
	    col.rgb *= 1.0 + fract(smoothstep(0.0, 1.0, 2.0 * sin((p.y * 2.0) + 2.0- (glossFreq * length(col.rgb + colNoise.rgb) * Glow))));
	    return vec4(col, texture2D(Tex, p).a);
	}
	    
	void main () {
	    gl_FragColor = CeramicMosaic_main(texture, v_uv0, uSize, uGlow);
	} 
	
}%
        