
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 0.78
          uStep: 
            value: 19.62
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
		float uStep;
	};

    
	vec4 ObliqueLine_main(vec4 MainColor, vec2 UV, float Intensity, float Step) 
	{
	    float g = max(MainColor.r, max(MainColor.g, MainColor.b)) * Intensity;
	    float f = mod((UV.x + UV.y + 500.0) * Step, 1.0);
	    if (mod(g, 1.0) > f)
	        MainColor.r = ceil(g);
	    else
	        MainColor.r = floor(g);
	    MainColor.r /= Intensity;
	    return vec4(vec3(MainColor.r), MainColor.a);
	}
	    
	void main () {
	    gl_FragColor = ObliqueLine_main(texture2D(texture, v_uv0), v_uv0, uIntensity, uStep);
	} 
	
}%
        