{
  "ver": "1.0.27",
  "uuid": "01488ec2-25b2-4e7a-b7a9-1ac6f058bae8",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uIntensity;\n  vec3 burn(float t, float intensity)\n{\n    float u = (0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t * t) / (1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t * t);\n    float v = (0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t * t) / (1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t * t);\n    float kuv = 2.0 * u - 8.0 * v + 4.0;\n    float x = 3.0 * u / kuv;\n    float y = 2.0 * v / kuv;\n    float z = 1.0 - x - y;\n    float Y = 1.0;\n    float YY = Y / y;\n    float X = YY * x;\n    float Z = YY * z;\n    vec3 color = vec3(X, Y, Z);\n    color.x = color.x * pow(0.0006 * t * intensity, 4.0) / intensity;\n    color.y = color.y * pow(0.0004 * t * intensity, 4.0) / intensity;\n    color.z = color.z * pow(0.0004 * t * intensity, 4.0) * intensity;\n    return color;\n}\nvec4 ColorBurn_main(vec4 MainColor, float Intensity)\n{\n    float lum = dot(MainColor.rgb, vec3(0.2126, 0.7152, 0.0722));\n    vec3 c = burn(lum * 4000.0, Intensity);\n    c += MainColor.rgb;\n    return vec4(c, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = ColorBurn_main(texture2D(texture, v_uv0), uIntensity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uIntensity;\n};\n  vec3 burn(float t, float intensity)\n{\n    float u = (0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t * t) / (1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t * t);\n    float v = (0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t * t) / (1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t * t);\n    float kuv = 2.0 * u - 8.0 * v + 4.0;\n    float x = 3.0 * u / kuv;\n    float y = 2.0 * v / kuv;\n    float z = 1.0 - x - y;\n    float Y = 1.0;\n    float YY = Y / y;\n    float X = YY * x;\n    float Z = YY * z;\n    vec3 color = vec3(X, Y, Z);\n    color.x = color.x * pow(0.0006 * t * intensity, 4.0) / intensity;\n    color.y = color.y * pow(0.0004 * t * intensity, 4.0) / intensity;\n    color.z = color.z * pow(0.0004 * t * intensity, 4.0) * intensity;\n    return color;\n}\nvec4 ColorBurn_main(vec4 MainColor, float Intensity)\n{\n    float lum = dot(MainColor.rgb, vec3(0.2126, 0.7152, 0.0722));\n    vec3 c = burn(lum * 4000.0, Intensity);\n    c += MainColor.rgb;\n    return vec4(c, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = ColorBurn_main(texture2D(texture, v_uv0), uIntensity);\n}"
      }
    }
  ],
  "subMetas": {}
}