{
  "ver": "1.0.27",
  "uuid": "7cea317e-f4d4-49e3-8fb4-ec507d9f6cd7",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uSize;\nuniform float uGlow;\nuniform sampler2D uTex;\nvec4 CeramicMosaic_main(sampler2D Tex, vec2 UV, float Size, float Glow)\n{\n    vec2 p = UV;\n    float textureResolution = Size;\n    UV = UV * textureResolution + 0.5;\n    vec2 iuv = floor(UV);\n    vec2 fuv = fract(UV);\n    vec2 fuv_2 = fuv;\n    fuv = fuv * fuv*(3.0 - 2.0 * fuv);\n    vec2 uv_X = (iuv + fuv - 0.5)/textureResolution;\n    vec4 tex = texture2D(Tex, uv_X);\n    vec3 col_X = tex.xyz;\n    fuv = fuv*fuv*(3.0 - 2.0 * fuv);\n    vec2 xsq = fuv * fuv;\n    vec2 xsqsq = xsq * xsq;\n    fuv = xsqsq * (25.0 - 48.0 * fuv + xsq * (25.0 - xsqsq));\n    UV = iuv + fuv * fuv * (3.0 - 2.0 * fuv);\n    UV = (UV - 0.5) / textureResolution;\n    vec3 colB = texture2D(Tex, UV).xyz;\n    vec3 colNoise = texture2D(Tex, UV).xyz;\n    float blendit = smoothstep(0.2, 0.8, fract(UV.x));\n    colB = mix(colB, col_X, blendit);\n    vec3 col = colB;\n    float glossFreq = mix( 0.15, 10.0, 0.13 );\n    col.rgb *= 1.0 + fract(smoothstep(0.0, 1.0, 2.0 * sin((p.y * 2.0) + 2.0- (glossFreq * length(col.rgb + colNoise.rgb) * Glow))));\n    return vec4(col, texture2D(Tex, p).a);\n}\nvoid main () {\n    gl_FragColor = CeramicMosaic_main(texture, v_uv0, uSize, uGlow);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uSize;\n  float uGlow;\n};\nuniform sampler2D uTex;\nvec4 CeramicMosaic_main(sampler2D Tex, vec2 UV, float Size, float Glow)\n{\n    vec2 p = UV;\n    float textureResolution = Size;\n    UV = UV * textureResolution + 0.5;\n    vec2 iuv = floor(UV);\n    vec2 fuv = fract(UV);\n    vec2 fuv_2 = fuv;\n    fuv = fuv * fuv*(3.0 - 2.0 * fuv);\n    vec2 uv_X = (iuv + fuv - 0.5)/textureResolution;\n    vec4 tex = texture2D(Tex, uv_X);\n    vec3 col_X = tex.xyz;\n    fuv = fuv*fuv*(3.0 - 2.0 * fuv);\n    vec2 xsq = fuv * fuv;\n    vec2 xsqsq = xsq * xsq;\n    fuv = xsqsq * (25.0 - 48.0 * fuv + xsq * (25.0 - xsqsq));\n    UV = iuv + fuv * fuv * (3.0 - 2.0 * fuv);\n    UV = (UV - 0.5) / textureResolution;\n    vec3 colB = texture2D(Tex, UV).xyz;\n    vec3 colNoise = texture2D(Tex, UV).xyz;\n    float blendit = smoothstep(0.2, 0.8, fract(UV.x));\n    colB = mix(colB, col_X, blendit);\n    vec3 col = colB;\n    float glossFreq = mix( 0.15, 10.0, 0.13 );\n    col.rgb *= 1.0 + fract(smoothstep(0.0, 1.0, 2.0 * sin((p.y * 2.0) + 2.0- (glossFreq * length(col.rgb + colNoise.rgb) * Glow))));\n    return vec4(col, texture2D(Tex, p).a);\n}\nvoid main () {\n    gl_FragColor = CeramicMosaic_main(texture, v_uv0, uSize, uGlow);\n}"
      }
    }
  ],
  "subMetas": {}
}