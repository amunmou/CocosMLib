{
  "ver": "1.0.27",
  "uuid": "9f44a1ca-5653-44a2-8839-c6f04359dc06",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uLineCount;\n  float noiseSimpleRandomValue(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat noiseSimpleInterpolate(float a, float b, float t)\n{\n    return (1.0 - t) * a + (t * b);\n}\nfloat noiseSimpleNoise(vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n    uv = abs(fract(uv) - 0.5);\n    vec2 c0 = i + vec2(0.0, 0.0);\n    vec2 c1 = i + vec2(1.0, 0.0);\n    vec2 c2 = i + vec2(0.0, 1.0);\n    vec2 c3 = i + vec2(1.0, 1.0);\n    float r0 = noiseSimpleRandomValue(c0);\n    float r1 = noiseSimpleRandomValue(c1);\n    float r2 = noiseSimpleRandomValue(c2);\n    float r3 = noiseSimpleRandomValue(c3);\n    float bottomOfGrid = noiseSimpleInterpolate(r0, r1, f.x);\n    float topOfGrid = noiseSimpleInterpolate(r2, r3, f.x);\n    float t = noiseSimpleInterpolate(bottomOfGrid, topOfGrid, f.y);\n    return t;\n}\nfloat noiseSimple(vec2 uv, float scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   return t;\n}\nvec4 remap(vec4 value, vec2 inMinMax, vec2 outMinMax)\n{\n    return (outMinMax.x + (value - inMinMax.x) * (outMinMax.y - outMinMax.x) / (inMinMax.y - inMinMax.x));\n}\nvec4 TVFlicker_main(vec4 MainColor, vec2 UV, float Seed, float LineCount)\n{\n    float noiseSimpleValue = noiseSimple(vec2(Seed), 2.0);\n    float noiseSimpleValue2 = noiseSimple(vec2(0.0, UV.y + Seed * LineCount), 40.0);\n    vec4 remapValue = remap(vec4(noiseSimpleValue2), vec2(0.0, 1.0), vec2(-0.50, 0.50));\n    vec2 cuv = vec2(remapValue.x * pow(noiseSimpleValue, 2.320) + UV.x, UV.y);\n    return texture2D(texture, cuv);\n}\nvoid main () {\n    gl_FragColor = TVFlicker_main(texture2D(texture, v_uv0), v_uv0, cc_time[0], uLineCount);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uLineCount;\n};\n  float noiseSimpleRandomValue(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat noiseSimpleInterpolate(float a, float b, float t)\n{\n    return (1.0 - t) * a + (t * b);\n}\nfloat noiseSimpleNoise(vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n    uv = abs(fract(uv) - 0.5);\n    vec2 c0 = i + vec2(0.0, 0.0);\n    vec2 c1 = i + vec2(1.0, 0.0);\n    vec2 c2 = i + vec2(0.0, 1.0);\n    vec2 c3 = i + vec2(1.0, 1.0);\n    float r0 = noiseSimpleRandomValue(c0);\n    float r1 = noiseSimpleRandomValue(c1);\n    float r2 = noiseSimpleRandomValue(c2);\n    float r3 = noiseSimpleRandomValue(c3);\n    float bottomOfGrid = noiseSimpleInterpolate(r0, r1, f.x);\n    float topOfGrid = noiseSimpleInterpolate(r2, r3, f.x);\n    float t = noiseSimpleInterpolate(bottomOfGrid, topOfGrid, f.y);\n    return t;\n}\nfloat noiseSimple(vec2 uv, float scale) {\n   float t = 0.0;\n   float freq = pow(2.0, 0.0);\n   float amp = pow(0.5, 3.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   freq = pow(2.0, 1.0);\n   amp = pow(0.5, 2.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   freq = pow(2.0, 2.0);\n   amp = pow(0.5, 1.0);\n   t += noiseSimpleNoise(vec2(uv.x * scale / freq, uv.y * scale / freq)) * amp;\n   return t;\n}\nvec4 remap(vec4 value, vec2 inMinMax, vec2 outMinMax)\n{\n    return (outMinMax.x + (value - inMinMax.x) * (outMinMax.y - outMinMax.x) / (inMinMax.y - inMinMax.x));\n}\nvec4 TVFlicker_main(vec4 MainColor, vec2 UV, float Seed, float LineCount)\n{\n    float noiseSimpleValue = noiseSimple(vec2(Seed), 2.0);\n    float noiseSimpleValue2 = noiseSimple(vec2(0.0, UV.y + Seed * LineCount), 40.0);\n    vec4 remapValue = remap(vec4(noiseSimpleValue2), vec2(0.0, 1.0), vec2(-0.50, 0.50));\n    vec2 cuv = vec2(remapValue.x * pow(noiseSimpleValue, 2.320) + UV.x, UV.y);\n    return texture2D(texture, cuv);\n}\nvoid main () {\n    gl_FragColor = TVFlicker_main(texture2D(texture, v_uv0), v_uv0, cc_time[0], uLineCount);\n}"
      }
    }
  ],
  "subMetas": {}
}