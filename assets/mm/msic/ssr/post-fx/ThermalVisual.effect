
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uEdge: 
            value: 0.9
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uEdge;
	};

    
	vec4 ThermalVisual_main(vec4 MainColor, float Edge) 
	{
	    float lum = (MainColor.r + MainColor.g + MainColor.b) / 3.0;
	    vec3 colour_1 = vec3(0.0, 0.0, 1.0);
	    vec3 colour_2 = vec3(1.0, 1.0, 0.0);
	    vec3 colour_3 = vec3(1.0, 0.0, 0.0);
	    vec3 ix = vec3(0.0);
	    vec3 ix_2 = vec3(0.0);
	    if (lum < Edge) {
	        ix = colour_1;
	        ix_2 = colour_2;
	    }
	    else {
	        ix = colour_2;
	        ix_2 = colour_3;
	    }
	    vec3 thermal = mix(ix, ix_2, (lum - float(ix) * 0.5) / 0.5);
	    return vec4(thermal, MainColor.a);
	}
	void main () {
	    gl_FragColor = ThermalVisual_main(texture2D(texture, v_uv0), uEdge);
	} 
	
}%
        