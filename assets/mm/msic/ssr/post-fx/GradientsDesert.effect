
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 1.0
          uBrightness: 
            value: 1.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
		float uBrightness;
	};

    
	vec3 desertGradient(float t) 
	{
	    float s = sqrt(clamp(1.0 - (t - 0.4) / 0.6, 0.0, 1.0));
	    vec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));
	    vec3 land = mix(vec3(0.7, 0.3, 0.0), vec3(0.85, 0.75 + max(0.8 - t * 20.0, 0.0), 0.5), pow(t / 0.4, 2.0));
	    return clamp((t > 0.4) ? sky : land, 0.0, 1.0) * clamp(1.5 * (1.0 - abs(t - 0.4)), 0.0, 1.0);
	}
	vec4 GradientsDesert_main(vec4 MainColor, vec2 UV, float Intensity, float Brightness) 
	{
	    float j = UV.x + (fract(sin(UV.y * 7.5e2 + UV.x * 6.4) * 1e2) - 0.5) * 0.005;
	    float b = (0.2126 * MainColor.r + 0.7152 * MainColor.g + 0.0722 * MainColor.b);
	    b = mix(b, 1.0 - b, Brightness);
	    vec3 map = mix(MainColor.rgb, desertGradient(b), vec3(Intensity));
	    return vec4(map, MainColor.a);
	}
	    
	void main () {
	    gl_FragColor = GradientsDesert_main(texture2D(texture, v_uv0), v_uv0, uIntensity, uBrightness);
	} 
	
}%
        