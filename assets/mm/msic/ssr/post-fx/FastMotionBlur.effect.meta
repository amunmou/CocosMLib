{
  "ver": "1.0.27",
  "uuid": "e89085a3-ab6b-4f63-9703-f9afca88972d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uAngle;\nuniform float uDist;\nuniform sampler2D uTex;\n  vec4 FastMotionBlur_main(sampler2D Tex, vec2 UV, float Angle, float Dist)\n{\n    Angle = Angle * 3.1415926;\n        vec4 r = vec4(0, 0, 0, 0);\n    Dist = Dist * 0.005;\n    r += texture2D(Tex, UV + (vec2(-Dist, -Dist) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 2.0, -Dist * 2.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 3.0, -Dist * 3.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 4.0, -Dist * 4.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV);\n    r += texture2D(Tex, UV + (vec2( Dist, Dist) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 2.0, Dist * 2.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 3.0, Dist * 3.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 4.0, Dist * 4.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r = r / 9.0;\n    return r;\n}\nvoid main () {\n    gl_FragColor = FastMotionBlur_main(texture, v_uv0, uAngle, uDist);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uAngle;\n  float uDist;\n};\nuniform sampler2D uTex;\n  vec4 FastMotionBlur_main(sampler2D Tex, vec2 UV, float Angle, float Dist)\n{\n    Angle = Angle * 3.1415926;\n        vec4 r = vec4(0, 0, 0, 0);\n    Dist = Dist * 0.005;\n    r += texture2D(Tex, UV + (vec2(-Dist, -Dist) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 2.0, -Dist * 2.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 3.0, -Dist * 3.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2(-Dist * 4.0, -Dist * 4.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV);\n    r += texture2D(Tex, UV + (vec2( Dist, Dist) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 2.0, Dist * 2.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 3.0, Dist * 3.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r += texture2D(Tex, UV + (vec2( Dist * 4.0, Dist * 4.0) * mat2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle))));\n    r = r / 9.0;\n    return r;\n}\nvoid main () {\n    gl_FragColor = FastMotionBlur_main(texture, v_uv0, uAngle, uDist);\n}"
      }
    }
  ],
  "subMetas": {}
}