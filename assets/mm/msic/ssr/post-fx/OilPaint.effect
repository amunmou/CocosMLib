
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 0.95
          uBrightness: 
            value: 0.9
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uIntensity;
		float uBrightness;
	};
	uniform sampler2D uTex;

    vec3 screen(vec3 s, vec3 d)
	{
	    return s + d - s * d;
	}
	float overlayf(float s, float d)
	{
	    return (d < 0.5) ? 2.0 * s * d : 1.0 - 2.0 * (1.0 - s) * (1.0 - d);
	}
	vec3 overlay(vec3 s, vec3 d)
	{
	    vec3 c;
	    c.x = overlayf(s.x, d.x);
	    c.y = overlayf(s.y, d.y);
	    c.z = overlayf(s.z, d.z);
	    return c;
	}
	vec3 sample(sampler2D tex, vec2 sc, vec2 size, const int x, const int y)
	{
	    sc = (sc.xy + vec2(x, y)) ;
	    return texture2D(tex, sc).xyz;
	}
	vec4 OilPaint_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity, float Brightness) 
	{
	    vec2 step = vec2 (1.0 / Size);
	    float n = float((5.92 + 1.0) * (5.92 + 1.0)) * Intensity;
	    int i; 
	    int j;
	    vec3 m0 = vec3(0.0); 
	    vec3 m1 = vec3(0.0); 
	    vec3 m2 = vec3(0.0); 
	    vec3 m3 = vec3(0.0);
	    vec3 s0 = vec3(0.0); 
	    vec3 s1 = vec3(0.0); 
	    vec3 s2 = vec3(0.0); 
	    vec3 s3 = vec3(0.0);
	    vec3 c;
	    for (float j = -5.92; j <= 0.0; ++j)  
	    {
	        for (float i = -5.92; i <= 0.0; ++i)  
	        {
	            c = texture2D(Tex, UV + vec2(i,j) * step).rgb;
	            m0 += c;
	            s0 += c * c;
	        }
	    }
	    for (float j = -5.92; j <= 0.0; ++j)  
	    {
	        for (float i = 0.0; i <= 5.92; ++i)  
	        {
	            c = texture2D(Tex, UV + vec2(i,j) * step).rgb;
	            m1 += c;
	            s1 += c * c;
	        }
	    }
	    for (float j = 0.0; j <= 5.92; ++j)  
	    {
	        for (float i = 0.0; i <= 5.92; ++i)  
	        {
	            c = texture2D(Tex, UV + vec2(i,j) * step).rgb;
	            m2 += c;
	            s2 += c * c;
	        }
	    }
	    for (float j = 0.0; j <= 5.92; ++j)  
	    {
	        for (float i = -5.92; i <= 0.0; ++i)  
	        {
	            c = texture2D(Tex, UV + vec2(i,j) * step).rgb;
	            m3 += c;
	            s3 += c * c;
	        }
	    }
	    vec4 result;
	    float min_sigma2 = 1e+2;
	    m0 /= n;
	    s0 = abs(s0 / n - m0 * m0);
	    float sigma2 = s0.r + s0.g + s0.b;
	    if (sigma2 < min_sigma2) 
	    {
	        min_sigma2 = sigma2;
	        result = vec4(m0, 1.0);
	    }
	    m1 /= n;
	    s1 = abs(s1 / n - m1 * m1);
	    sigma2 = s1.r + s1.g + s1.b;
	    if (sigma2 < min_sigma2) 
	    {
	        min_sigma2 = sigma2;
	        result = vec4(m1, 1.0);
	    }
	    m2 /= n;
	    s2 = abs(s2 / n - m2 * m2);
	    sigma2 = s2.r + s2.g + s2.b;
	    if (sigma2 < min_sigma2) 
	    {
	        min_sigma2 = sigma2;
	        result = vec4(m2, 1.0);
	    }
	    m3 /= n;
	    s3 = abs(s3 / n - m3 * m3);
	    sigma2 = s3.r + s3.g + s3.b;
	    if (sigma2 < min_sigma2) 
	    {
	        min_sigma2 = sigma2;
	        result = vec4(m3, 1.0);
	    }
	    vec3 hc = sample(Tex, UV.xy, Size, -1, -1) * 1.0 + sample(Tex, UV.xy, Size, 0, -1) * 2.0 + sample(Tex, UV.xy, Size, 1,-1) * 1.0 + sample(Tex, UV.xy, Size, -1, 1) * -1.0 + sample(Tex, UV.xy, Size, 0, 1) * -2.0 + sample(Tex, UV.xy, Size, 1, 1) * -1.0;
	    vec3 vc = sample(Tex, UV.xy, Size, -1, -1) * 1.0 + sample(Tex, UV.xy, Size, -1, 0) * 2.0 + sample(Tex, UV.xy, Size, -1, 1) * 1.0 + sample(Tex, UV.xy, Size, 1, -1) * -1.0 + sample(Tex, UV.xy, Size, 1, 0) * -2.0 + sample(Tex, UV.xy, Size, 1, 1) * -1.0;
	    vec3 c2 = sample(Tex, UV.xy, Size, 0, 0);
	    return vec4(overlay(screen(result.rgb,c2.rgb), result.rgb), texture2D(Tex, UV).a) * Brightness;
	}
	void main () {
	    gl_FragColor = OilPaint_main(texture, v_uv0, uSize, uIntensity, uBrightness);
	} 
	
}%
        