
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 1.0
          uSpeed: 
            value: 1.0
          uLineColor: 
            value: 
              - 1.000
              - 0.067
              - 1.000
              - 1.000
            inspector: 
              type: color
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec4 uLineColor;
		float uIntensity;
		float uSpeed;
	};

    float noise(vec2 val) 
	{
	    return fract(sin(dot(val, vec2(12.9898, 78.233))) * 43758.5453);
	}
	float getFrameTime(float seed, float speed) 
	{
	    return floor(seed * speed) / speed;
	}
	vec4 MangaFocusLines_main(vec4 MainColor, vec2 UV, float Seed, float Intensity, float Speed, vec4 LineColor) 
	{
	    vec2 vec = UV - vec2(0.5, 0.5);
	    float PI = 3.141592653589793 * Intensity;
	    float l = length(vec) / length(vec2(1.0, 1.0) - vec2(0.5, 0.5));
	    float r = (atan(vec.x, vec.y) + PI) / (2.0 * PI);
	    float t = getFrameTime(Seed, Speed);
	    t = max(t, 0.1);
	    float r2 = floor(r * 700.0) / 700.0 * t;
	    float ran = noise(vec2(r2)) * 0.7 + 0.3;
	    float c = l > ran ? abs(l - ran) : 0.0;
	    return mix(MainColor, LineColor, c * Intensity);
	}
	    
	void main () {
	    gl_FragColor = MangaFocusLines_main(texture2D(texture, v_uv0), v_uv0, cc_time[0], uIntensity, uSpeed, uLineColor);
	} 
	
}%
        