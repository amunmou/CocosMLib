{
  "ver": "1.0.27",
  "uuid": "8cd71b9a-20e8-42a3-92d2-9fd3282fb030",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uIntensity;\nuniform float uBrightness;\nuniform sampler2D uTex;\nvec4 GlassLight_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity, float Brightness)\n{\n    vec3 e = vec3(vec2(1.0) / Size, 0.0);\n    float p0 = texture2D(Tex, UV - e.zy).x;\n    float p1 = texture2D(Tex, UV - e.xz).x;\n    float p2 = texture2D(Tex, UV + e.xz).x;\n    float p3 = texture2D(Tex, UV + e.zy).x;\n    vec3 grad = normalize(vec3(p2 - p1, p3 - p0, 1.0));\n    vec4 c = texture2D(Tex, UV + grad.xy * Intensity);\n    vec3 light = normalize(vec3(0.5, 0.5, Brightness));\n    float diffuse = dot(grad, light);\n    float spec = pow(max(0.0 , -reflect(light, grad).z), 32.0);\n    return vec4((c * diffuse + spec).rgb, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = GlassLight_main(texture, v_uv0, uSize, uIntensity, uBrightness);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uIntensity;\n  float uBrightness;\n};\nuniform sampler2D uTex;\nvec4 GlassLight_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity, float Brightness)\n{\n    vec3 e = vec3(vec2(1.0) / Size, 0.0);\n    float p0 = texture2D(Tex, UV - e.zy).x;\n    float p1 = texture2D(Tex, UV - e.xz).x;\n    float p2 = texture2D(Tex, UV + e.xz).x;\n    float p3 = texture2D(Tex, UV + e.zy).x;\n    vec3 grad = normalize(vec3(p2 - p1, p3 - p0, 1.0));\n    vec4 c = texture2D(Tex, UV + grad.xy * Intensity);\n    vec3 light = normalize(vec3(0.5, 0.5, Brightness));\n    float diffuse = dot(grad, light);\n    float spec = pow(max(0.0 , -reflect(light, grad).z), 32.0);\n    return vec4((c * diffuse + spec).rgb, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = GlassLight_main(texture, v_uv0, uSize, uIntensity, uBrightness);\n}"
      }
    }
  ],
  "subMetas": {}
}