{
  "ver": "1.0.27",
  "uuid": "bebd6bf1-b112-40c8-8245-d19b73d71899",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uSpeed;\nuniform sampler2D uTex;\n  vec2 noiseGradientNoise(vec2 p)\n{\n    p = mod(p, 289.0);\n    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;\n    x = mod((34.0 * x + 1.0) * x, 289.0);\n    x = fract(x / 41.0) * 2.0 - 1.0;\n    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));\n}\nfloat noiseGradient(vec2 UV, float Scale)\n{\n    vec2 p = UV * Scale;\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float d00 = dot(noiseGradientNoise(ip), fp);\n    float d01 = dot(noiseGradientNoise(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));\n    float d10 = dot(noiseGradientNoise(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));\n    float d11 = dot(noiseGradientNoise(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));\n    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);\n    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);\n}\nvec4 WindBlowing_main(sampler2D Tex, vec2 UV, float Seed, float Speed)\n{\n    vec2 cuv = UV * vec2(0.450, 0.0) + vec2(Seed * Speed);\n    float noiseGradientValue = noiseGradient(cuv, -16.0);\n    float cx = mix(UV.x, noiseGradientValue, 0.0);\n    float cy = mix(UV.y, noiseGradientValue, 0.030);\n    return texture2D(Tex, vec2(cx, cy));\n}\nvoid main () {\n    gl_FragColor = WindBlowing_main(texture, v_uv0, cc_time[0], uSpeed);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uSpeed;\n};\nuniform sampler2D uTex;\n  vec2 noiseGradientNoise(vec2 p)\n{\n    p = mod(p, 289.0);\n    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;\n    x = mod((34.0 * x + 1.0) * x, 289.0);\n    x = fract(x / 41.0) * 2.0 - 1.0;\n    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));\n}\nfloat noiseGradient(vec2 UV, float Scale)\n{\n    vec2 p = UV * Scale;\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float d00 = dot(noiseGradientNoise(ip), fp);\n    float d01 = dot(noiseGradientNoise(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));\n    float d10 = dot(noiseGradientNoise(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));\n    float d11 = dot(noiseGradientNoise(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));\n    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);\n    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);\n}\nvec4 WindBlowing_main(sampler2D Tex, vec2 UV, float Seed, float Speed)\n{\n    vec2 cuv = UV * vec2(0.450, 0.0) + vec2(Seed * Speed);\n    float noiseGradientValue = noiseGradient(cuv, -16.0);\n    float cx = mix(UV.x, noiseGradientValue, 0.0);\n    float cy = mix(UV.y, noiseGradientValue, 0.030);\n    return texture2D(Tex, vec2(cx, cy));\n}\nvoid main () {\n    gl_FragColor = WindBlowing_main(texture, v_uv0, cc_time[0], uSpeed);\n}"
      }
    }
  ],
  "subMetas": {}
}