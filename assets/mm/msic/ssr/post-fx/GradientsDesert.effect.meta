{
  "ver": "1.0.27",
  "uuid": "6f4082e1-dfd0-4124-bbaa-208011819eac",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uIntensity;\nuniform float uBrightness;\nvec3 desertGradient(float t)\n{\n    float s = sqrt(clamp(1.0 - (t - 0.4) / 0.6, 0.0, 1.0));\n    vec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));\n    vec3 land = mix(vec3(0.7, 0.3, 0.0), vec3(0.85, 0.75 + max(0.8 - t * 20.0, 0.0), 0.5), pow(t / 0.4, 2.0));\n    return clamp((t > 0.4) ? sky : land, 0.0, 1.0) * clamp(1.5 * (1.0 - abs(t - 0.4)), 0.0, 1.0);\n}\nvec4 GradientsDesert_main(vec4 MainColor, vec2 UV, float Intensity, float Brightness)\n{\n    float j = UV.x + (fract(sin(UV.y * 7.5e2 + UV.x * 6.4) * 1e2) - 0.5) * 0.005;\n    float b = (0.2126 * MainColor.r + 0.7152 * MainColor.g + 0.0722 * MainColor.b);\n    b = mix(b, 1.0 - b, Brightness);\n    vec3 map = mix(MainColor.rgb, desertGradient(b), vec3(Intensity));\n    return vec4(map, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = GradientsDesert_main(texture2D(texture, v_uv0), v_uv0, uIntensity, uBrightness);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uIntensity;\n  float uBrightness;\n};\nvec3 desertGradient(float t)\n{\n    float s = sqrt(clamp(1.0 - (t - 0.4) / 0.6, 0.0, 1.0));\n    vec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));\n    vec3 land = mix(vec3(0.7, 0.3, 0.0), vec3(0.85, 0.75 + max(0.8 - t * 20.0, 0.0), 0.5), pow(t / 0.4, 2.0));\n    return clamp((t > 0.4) ? sky : land, 0.0, 1.0) * clamp(1.5 * (1.0 - abs(t - 0.4)), 0.0, 1.0);\n}\nvec4 GradientsDesert_main(vec4 MainColor, vec2 UV, float Intensity, float Brightness)\n{\n    float j = UV.x + (fract(sin(UV.y * 7.5e2 + UV.x * 6.4) * 1e2) - 0.5) * 0.005;\n    float b = (0.2126 * MainColor.r + 0.7152 * MainColor.g + 0.0722 * MainColor.b);\n    b = mix(b, 1.0 - b, Brightness);\n    vec3 map = mix(MainColor.rgb, desertGradient(b), vec3(Intensity));\n    return vec4(map, MainColor.a);\n}\nvoid main () {\n    gl_FragColor = GradientsDesert_main(texture2D(texture, v_uv0), v_uv0, uIntensity, uBrightness);\n}"
      }
    }
  ],
  "subMetas": {}
}