
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 0.75
          uThreshold: 
            value: 0.92
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
		float uThreshold;
	};

    float added(vec2 sh, float d) 
	{
	    vec2 rsh = sh * 0.70710638280;
	    return 0.5 + 0.25 * cos((rsh.x + rsh.y) * d) + 0.25 * cos((rsh.x - rsh.y) * d);
	}
	vec4 Halftone_main(vec4 MainColor, vec2 UV, float Intensity, float Threshold)
	{
	   float rasterPattern = added(UV, 2136.2812 / Intensity);
	   float avg = 0.2125 * MainColor.r + 0.7154 * MainColor.g + 0.0721 * MainColor.b;
	   float gray = (rasterPattern * Threshold + avg - Threshold) / (1.0 - Threshold);
	   return vec4(vec3(gray), MainColor.a);
	}
	void main () {
	    gl_FragColor = Halftone_main(texture2D(texture, v_uv0), v_uv0, uIntensity, uThreshold);
	} 
	
}%
        