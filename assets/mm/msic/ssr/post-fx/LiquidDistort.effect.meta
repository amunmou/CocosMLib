{
  "ver": "1.0.27",
  "uuid": "35e323be-270f-4d09-887b-f367c4d6bef5",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uIntensity;\nuniform float uSpeed;\nuniform float uDistortion;\nuniform float uLight;\nuniform sampler2D uTex;\n  float col(vec2 coord, float seed, float speed, float distortion) {\n    float time = seed;\n    float delta_theta = 0.897597901025655210989326680937;\n    float col = 0.0;\n    float theta = 0.0;\n    for (int i = 0; i < 8; i++) {\n        vec2 adjc = coord;\n        theta = delta_theta * float(i);\n        adjc.x += cos(theta) * time * speed + time * distortion;\n        adjc.y -= sin(theta) * time * speed - time * distortion;\n        col = col + cos((adjc.x * cos(theta) - adjc.y * sin(theta)) * 6.0);\n    }\n    return cos(col);\n}\nvec4 LiquidDistort_main(sampler2D Tex, vec2 UV, float Seed, float Intensity, float Speed, float Distortion, float Light)\n{\n    vec2 c1 = UV;\n    vec2 c2 = UV;\n    float cc1 = col(c1, Seed, Speed, Distortion);\n    c2.x += 8.53;\n    float dx = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;\n    c2.x = UV.x;\n    c2.y += 8.53;\n    float dy = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;\n    c1.x += dx * 2.0;\n    c1.y = (c1.y + dy * 2.0);\n    float alpha = 1.0 + dot(dx, dy) * 700.0 * Light;\n    float ddx = dx - 0.012;\n    float ddy = dy - 0.012;\n    if (ddx > 0.0 && ddy > 0.0)\n        alpha = pow(alpha, ddx * ddy * 200000.0);\n    c1 = mix(UV, c1, Intensity);\n    vec4 col = texture2D(Tex, c1) * alpha;\n    return vec4(col.rgb, col.a);\n}\nvoid main () {\n    gl_FragColor = LiquidDistort_main(texture, v_uv0, cc_time[0], uIntensity, uSpeed, uDistortion, uLight);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uIntensity;\n  float uSpeed;\n  float uDistortion;\n  float uLight;\n};\nuniform sampler2D uTex;\n  float col(vec2 coord, float seed, float speed, float distortion) {\n    float time = seed;\n    float delta_theta = 0.897597901025655210989326680937;\n    float col = 0.0;\n    float theta = 0.0;\n    for (int i = 0; i < 8; i++) {\n        vec2 adjc = coord;\n        theta = delta_theta * float(i);\n        adjc.x += cos(theta) * time * speed + time * distortion;\n        adjc.y -= sin(theta) * time * speed - time * distortion;\n        col = col + cos((adjc.x * cos(theta) - adjc.y * sin(theta)) * 6.0);\n    }\n    return cos(col);\n}\nvec4 LiquidDistort_main(sampler2D Tex, vec2 UV, float Seed, float Intensity, float Speed, float Distortion, float Light)\n{\n    vec2 c1 = UV;\n    vec2 c2 = UV;\n    float cc1 = col(c1, Seed, Speed, Distortion);\n    c2.x += 8.53;\n    float dx = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;\n    c2.x = UV.x;\n    c2.y += 8.53;\n    float dy = 0.50 * (cc1 - col(c2, Seed, Speed, Distortion)) / 60.0;\n    c1.x += dx * 2.0;\n    c1.y = (c1.y + dy * 2.0);\n    float alpha = 1.0 + dot(dx, dy) * 700.0 * Light;\n    float ddx = dx - 0.012;\n    float ddy = dy - 0.012;\n    if (ddx > 0.0 && ddy > 0.0)\n        alpha = pow(alpha, ddx * ddy * 200000.0);\n    c1 = mix(UV, c1, Intensity);\n    vec4 col = texture2D(Tex, c1) * alpha;\n    return vec4(col.rgb, col.a);\n}\nvoid main () {\n    gl_FragColor = LiquidDistort_main(texture, v_uv0, cc_time[0], uIntensity, uSpeed, uDistortion, uLight);\n}"
      }
    }
  ],
  "subMetas": {}
}