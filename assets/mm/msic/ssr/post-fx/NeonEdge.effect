
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uEdge: 
            value: 2.4
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uEdge;
	};
	uniform sampler2D uTex;

    
	vec4 NeonEdge_main(sampler2D Tex, vec2 UV, float Edge) 
	{
	    float offset = 1.0 / (Edge * 100.0);
	    vec3 o = vec3(-offset, 0.0, offset);
	    vec4 gx = vec4(0.0);
	    vec4 gy = vec4(0.0);
	    vec4 t;
	    gx += texture2D(Tex, UV + o.xz);
	    gy += gx;
	    gx += 2.0 * texture2D(Tex, UV + o.xy);
	    t = texture2D(Tex, UV + vec2(o.x));
	    gx += t;
	    gy -= t;
	    gy += 2.0 * texture2D(Tex, UV + o.yz);
	    gy -= 2.0 * texture2D(Tex, UV + o.yx);
	    t = texture2D(Tex, UV + vec2(o.z));
	    gx -= t;
	    gy += t;
	    gx -= 2.0 * texture2D(Tex, UV + o.zy);
	    t = texture2D(Tex, UV + o.zx);
	    gx -= t;
	    gy -= t;
	    vec4 grad = sqrt(gx * gx + gy * gy);
	    return vec4(grad.rgb, texture2D(Tex, UV).a);
	}
	    
	void main () {
	    gl_FragColor = NeonEdge_main(texture, v_uv0, uEdge);
	} 
	
}%
        