{
  "ver": "1.0.27",
  "uuid": "390ec42a-5374-426c-8ba1-04f811d8a928",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uIntensity;\nuniform sampler2D uTex;\n  vec2 barrelDistortion(vec2 coord, float amt) {\n    vec2 cc = coord - 0.5;\n    float dist = dot(cc, cc);\n    return coord + cc * dist * amt;\n}\nfloat sat(float t) {\n    return clamp(t, 0.0, 1.0);\n}\nfloat linterp(float t) {\n    return sat(1.0 - abs(2.0 * t - 1.0));\n}\nfloat remap(float t, float a, float b) {\n    return sat((t - a) / (b - a));\n}\nvec3 spectrumOffset(float t) {\n    vec3 ret;\n    float lo = step(t, 0.5);\n    float hi = 1.0 - lo;\n    float w = linterp(remap(t, 1.0 / 6.0, 5.0 / 6.0));\n    ret = vec3(lo, 1.0, hi) * vec3(1.0 - w, w, 1.0 - w);\n    return pow(ret, vec3(1.0 / 2.2));\n}\nvec4 BarrelBlur_main(sampler2D Tex, vec2 UV, float Intensity)\n{\n    vec3 sumcol = vec3(0.0);\n    vec3 sumw = vec3(0.0);\n    for (int i = 0; i < 10; ++i) {\n        float t = float(i) * 0.1;\n        vec3 w = spectrumOffset(t);\n        sumw += w;\n        vec2 distortUV = barrelDistortion(UV, Intensity * t);\n        vec4 color = texture2D(Tex, distortUV);\n        sumcol += w * color.rgb;\n    }\n    return vec4(sumcol / sumw, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = BarrelBlur_main(texture, v_uv0, uIntensity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uIntensity;\n};\nuniform sampler2D uTex;\n  vec2 barrelDistortion(vec2 coord, float amt) {\n    vec2 cc = coord - 0.5;\n    float dist = dot(cc, cc);\n    return coord + cc * dist * amt;\n}\nfloat sat(float t) {\n    return clamp(t, 0.0, 1.0);\n}\nfloat linterp(float t) {\n    return sat(1.0 - abs(2.0 * t - 1.0));\n}\nfloat remap(float t, float a, float b) {\n    return sat((t - a) / (b - a));\n}\nvec3 spectrumOffset(float t) {\n    vec3 ret;\n    float lo = step(t, 0.5);\n    float hi = 1.0 - lo;\n    float w = linterp(remap(t, 1.0 / 6.0, 5.0 / 6.0));\n    ret = vec3(lo, 1.0, hi) * vec3(1.0 - w, w, 1.0 - w);\n    return pow(ret, vec3(1.0 / 2.2));\n}\nvec4 BarrelBlur_main(sampler2D Tex, vec2 UV, float Intensity)\n{\n    vec3 sumcol = vec3(0.0);\n    vec3 sumw = vec3(0.0);\n    for (int i = 0; i < 10; ++i) {\n        float t = float(i) * 0.1;\n        vec3 w = spectrumOffset(t);\n        sumw += w;\n        vec2 distortUV = barrelDistortion(UV, Intensity * t);\n        vec4 color = texture2D(Tex, distortUV);\n        sumcol += w * color.rgb;\n    }\n    return vec4(sumcol / sumw, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = BarrelBlur_main(texture, v_uv0, uIntensity);\n}"
      }
    }
  ],
  "subMetas": {}
}