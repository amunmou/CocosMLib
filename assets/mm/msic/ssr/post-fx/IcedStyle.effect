
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 0.45
          uDeepness: 
            value: 0.25
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
		float uDeepness;
	};
	uniform sampler2D uTex;

    vec3 Metal(float t, float deepness) 
	{
	    float u = (0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t * t) / (1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t * t);
	    float v = (0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t * t) / (1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t * t);
	    float x = 3.0 * u / (2.0 * u - 8.0 * v + 4.0);
	    float y = 2.0 * v / (2.0 * u - 8.0 * v + 4.0);
	    float z = 1.0 - x - y;
	    float Y = 1.0;
	    float X = (Y / y) * x;
	    float Z = (Y / y) * z;
	    vec3 color = vec3(Z, Y, X) / deepness;
	    color.x = color.x * pow(0.0006 * t, 4.0);
	    color.y = color.y * pow(0.0004 * t, 4.0);
	    color.z = color.z * pow(0.0004 * t, 4.0);
	    return color;
	}
	vec4 rainbow(float t) 
	{
	    t = mod(t, 1.0);
	    float tx = t * 6.0;
	    float r = clamp(tx - 2.0, 0.0, 1.0) + clamp(2.0 - tx, 0.0, 1.0);
	    return vec4(1.0, 1.0, 1.0, r);
	}
	vec4 plasma(sampler2D tex, vec2 uv, float deepness) 
	{
	    vec2 tuv = uv;
	    uv *= 2.5;
	    float a = 1.0;
	    float n = sin(a + 2.0 * uv.x) + sin(a - 2.0 * uv.x) + sin(a + 2.0 * uv.y) + sin(a + 5.0 * uv.y);
	    n = mod(((5.0 + n) / 5.0), 1.0) * deepness;
	    n += texture2D(tex, tuv).r * 0.2 + texture2D(tex, tuv).g * 0.4 + texture2D(tex, tuv).b * 0.2;
	    return rainbow(n * deepness);
	}
	vec4 IcedStyle_main(sampler2D Tex, vec2 UV, float Intensity, float Deepness) 
	{
	    vec4 noise = texture2D(Tex, UV);
	    float lum = dot(noise.rgb, vec3 (0.2126, 0.7152, 0.0722));
	    vec3 c = Metal(lum * Intensity * 4000.0, Deepness);
	    float textureColor = texture2D(Tex, UV).a;
	    vec4 ice = plasma(Tex, UV, Deepness);
	    ice.a = ice.a * textureColor;
	    ice.r = ice.a;
	    ice.g = ice.a;
	    ice.b = ice.a;
	    ice.rgb = c.rgb + (1.0 - ice.a);
	    return vec4(ice.rgb, noise.a);
	}
	void main () {
	    gl_FragColor = IcedStyle_main(texture, v_uv0, uIntensity, uDeepness);
	} 
	
}%
        