
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 0.3
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uIntensity;
	};
	uniform sampler2D uTex;

    vec2 barrelDistortion(vec2 coord, float amt) {
	    vec2 cc = coord - 0.5;
	    float dist = dot(cc, cc);
	    return coord + cc * dist * amt;  
	}
	float sat(float t) {
	    return clamp(t, 0.0, 1.0);
	}
	float linterp(float t) {
	    return sat(1.0 - abs(2.0 * t - 1.0));
	}
	float remap(float t, float a, float b) {
	    return sat((t - a) / (b - a));
	}
	vec3 spectrumOffset(float t) {
	    vec3 ret;
	    float lo = step(t, 0.5);
	    float hi = 1.0 - lo;
	    float w = linterp(remap(t, 1.0 / 6.0, 5.0 / 6.0));
	    ret = vec3(lo, 1.0, hi) * vec3(1.0 - w, w, 1.0 - w);
	    return pow(ret, vec3(1.0 / 2.2));
	}
	vec4 BarrelBlur_main(sampler2D Tex, vec2 UV, float Intensity) 
	{
	    vec3 sumcol = vec3(0.0);
	    vec3 sumw = vec3(0.0);
	    for (int i = 0; i < 10; ++i) {
	        float t = float(i) * 0.1;
	        vec3 w = spectrumOffset(t);
	        sumw += w;
	        vec2 distortUV = barrelDistortion(UV, Intensity * t);
	        vec4 color = texture2D(Tex, distortUV);
	        sumcol += w * color.rgb;
	    }
	    return vec4(sumcol / sumw, texture2D(Tex, UV).a);   
	}
	void main () {
	    gl_FragColor = BarrelBlur_main(texture, v_uv0, uIntensity);
	} 
	
}%
        