{
  "ver": "1.0.27",
  "uuid": "b7ff7bcd-7035-40b0-a32a-7fc36201ca27",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uEdge;\nuniform sampler2D uTex;\nvec4 NeonEdge_main(sampler2D Tex, vec2 UV, float Edge)\n{\n    float offset = 1.0 / (Edge * 100.0);\n    vec3 o = vec3(-offset, 0.0, offset);\n    vec4 gx = vec4(0.0);\n    vec4 gy = vec4(0.0);\n    vec4 t;\n    gx += texture2D(Tex, UV + o.xz);\n    gy += gx;\n    gx += 2.0 * texture2D(Tex, UV + o.xy);\n    t = texture2D(Tex, UV + vec2(o.x));\n    gx += t;\n    gy -= t;\n    gy += 2.0 * texture2D(Tex, UV + o.yz);\n    gy -= 2.0 * texture2D(Tex, UV + o.yx);\n    t = texture2D(Tex, UV + vec2(o.z));\n    gx -= t;\n    gy += t;\n    gx -= 2.0 * texture2D(Tex, UV + o.zy);\n    t = texture2D(Tex, UV + o.zx);\n    gx -= t;\n    gy -= t;\n    vec4 grad = sqrt(gx * gx + gy * gy);\n    return vec4(grad.rgb, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = NeonEdge_main(texture, v_uv0, uEdge);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uEdge;\n};\nuniform sampler2D uTex;\nvec4 NeonEdge_main(sampler2D Tex, vec2 UV, float Edge)\n{\n    float offset = 1.0 / (Edge * 100.0);\n    vec3 o = vec3(-offset, 0.0, offset);\n    vec4 gx = vec4(0.0);\n    vec4 gy = vec4(0.0);\n    vec4 t;\n    gx += texture2D(Tex, UV + o.xz);\n    gy += gx;\n    gx += 2.0 * texture2D(Tex, UV + o.xy);\n    t = texture2D(Tex, UV + vec2(o.x));\n    gx += t;\n    gy -= t;\n    gy += 2.0 * texture2D(Tex, UV + o.yz);\n    gy -= 2.0 * texture2D(Tex, UV + o.yx);\n    t = texture2D(Tex, UV + vec2(o.z));\n    gx -= t;\n    gy += t;\n    gx -= 2.0 * texture2D(Tex, UV + o.zy);\n    t = texture2D(Tex, UV + o.zx);\n    gx -= t;\n    gy -= t;\n    vec4 grad = sqrt(gx * gx + gy * gy);\n    return vec4(grad.rgb, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = NeonEdge_main(texture, v_uv0, uEdge);\n}"
      }
    }
  ],
  "subMetas": {}
}